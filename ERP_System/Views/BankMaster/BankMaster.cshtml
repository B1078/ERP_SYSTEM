

@{
    string? UserName = ViewContext.HttpContext.Session.GetString("UserName");
    DateTime currentDate = DateTime.Now;
    string formattedDate = currentDate.ToString("dd-MM-yyyy");
}

<div class="col-xl-12 col-md-12">
    <div class="card table-card p-2 mb-0 Div_navigation">
        <div class="row">
            <div class="col-md-12">
                <button class="btn text-center btn-sm btn-primary btn_first p-2" title="Get First Document" style="width:50px; font-size:18px;">
                    <i class="fa fa-arrow-circle-o-left"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary btn_backward p-2" title="Get Privious Record" style="width:50px; font-size:18px;">
                    <i class="fas fa-long-arrow-alt-left"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary p-2 btn_forward" title="Get Next Record" style="width:50px; font-size:18px;">
                    <i class="fas fa-long-arrow-alt-right"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary btn_last p-2" title="Get Last Document" style="width:50px; font-size:18px;">
                    <i class="fa fa-arrow-circle-o-right"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary btn_reload p-2" title="Reload" style="width:50px; font-size:18px;">
                    <i class="fa fa-refresh"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary p-2 " id="XLS" title="Export" style="width:50px; font-size:18px;">
                    <i class="fa fa-arrow-circle-o-up"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="card table-card mt-2">
        <div class="card-header">
            <h5 class="webtitle">Bank Master</h5>
            <div class="card-header-right">
                <ul class="list-unstyled card-option">
                    <li><i class="fa fa fa-wrench open-card-option"></i></li>
                    <li><i class="fa fa-window-maximize full-card"></i></li>
                    <li><i class="fa fa-minus minimize-card"></i></li>
                    <li><i class="fa fa-refresh reload-card"></i></li>
                    <li hidden><i class="fa fa-trash close-card"></i></li>
                </ul>
            </div>
        </div>
        <div class="card-block shadow">
            <!-- Row start -->
            <div class="row p-2">
                <div class="col-lg-12 col-xl-12 ">
                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs  tabs" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" data-toggle="tab" id="Create_User_Tab" href="#Create_User" role="tab">Create Bank</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#All_Users" role="tab">All  Banks</a>
                        </li>
                    </ul>
                    <!-- Tab panes -->
                    <div class="tab-content tabs card-block">
                        <div class="tab-pane active p-0 m-0 mt-2" id="Create_User" role="tabpanel">
                            <form id="BankMaster_Form" class="w-100 mt-4 p-4 border">
                                <div class="row justify-content-start mt-1 mb-3 p-1">
                                    <div class="col-md-6 col-lg-6">
                                        <label class="switch">
                                            <input type="checkbox" value="Y" checked name="IsActive" id="IsActive" class="toggleSwitch form-control form-control-sm">
                                            <span class="slider"></span>
                                        </label>
                                    </div>
                                    <div class="col-md-6 col-lg-6">
                                        <div class="row align-items-center">
                                            <div class="col-md-3"></div>
                                            <div class="col-md-3">
                                                <button type="button" id="DownloadTemplete" class="btn btn-sm btn-primary w-100">
                                                    Download Template
                                                </button>
                                            </div>
                                            <div class="col-md-3">
                                                <input class='p-1 form-control form-control-sm selectfile' id="Import" type='file' placeholder='Choose File' />
                                            </div>
                                            <div class="col-md-3 d-flex justify-content-end">
                                                <button type="button" id="Upload_Xls" class="btn btn-sm btn-success w-100">Upload</button>
                                                <button type="button" class="btn btn-sm btn-primary" id="ViewExcel"><i class="fa fa-eye"></i></button>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <hr>
                                <div class="row mt-2">
                                    <input hidden name="BankId" id="BankId" value="" type="text" placeholder="BankId" class="form-control form-control-sm Form_Elem" />
                                    <div class="col-md-6 mt-1 mb-1">
                                        <label for="BankName">Bank Name</label>
                                        <input name="BankName" id="BankName" type="text" oninput="MaxLengthInp(this,50)" placeholder="Bank Name" class="form-control form-control-sm Form_Elem" />
                                    </div>
                                    <div class="col-md-6 mt-1 mb-1">
                                        <label for="BankBranch"> Branch</label>
                                        <input name="BankBranch" id="BankBranch" type="text" placeholder="Bank Branch" oninput="MaxLengthInp(this,200)" class="form-control form-control-sm Form_Elem" />
                                    </div>
                                    <div class="col-md-6 mt-1 mb-1">
                                        <label for="BankIFSCcd">IFSC Code</label>
                                        <input name="BankIFSCcd" id="BankIFSCcd" type="text" placeholder="IFSC CODE" class="form-control  IFSCINPUT form-control-sm Form_Elem" />
                                    </div>
                                    <div class="col-md-6 mt-1 mb-1">
                                        <label for="BankSwiftcd"> Swift Code</label>
                                        <input name="BankSwiftcd" id="BankSwiftcd" type="text" placeholder=" Swift Code" class="form-control SWIFTINPUT form-control-sm Form_Elem" />
                                    </div>
                                    <div class="col-md-8 mt-1 mb-1">
                                    </div>
                                    <div class="col-md-6 mt-1 mb-1">
                                        <label for="BankAddr"> Address</label>
                                        <textarea style="height:103px;" name="BankAddr" id="BankAddr" type="text" placeholder="Bank Address" class="form-control form-control-sm Form_Elem"></textarea>
                                    </div>
                                    <div class="col-md-6 mt-1 mb-1">
                                        <div class="row">
                                            <div class="col-md-6 mt-1 mb-1">
                                                <label for="CntryId">Country</label>
                                                <select style="height:35px;" name="CntryId" id="CntryId" type="text" class="form-control  form-control-sm Form_Elem">
                                                    <option value="">Select Country</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6 mt-1 mb-1">
                                                <label for="StateId">State</label>
                                                <select style="height:35px;" name="StateId" id="StateId" type="text" class="form-control  form-control-sm Form_Elem">
                                                    <option value="">Select Country</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6 mt-1 mb-1">
                                                <label for="BankCity"> City</label>
                                                <input name="BankCity" id="BankCity" type="text" placeholder="Bank City" class="form-control form-control-sm Form_Elem" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mt-1 mb-1 d-none">
                                        <label for="CreatedBy ">Created By</label>
                                        <input name="CreatedBy" id="CreatedBy" readonly type="text" value="@UserName" placeholder="Created by" class="form-control form-control-sm Form_Elem" />
                                    </div>
                                    <div class="col-md-4 mt-1 mb-1 d-none">
                                        <label for="UpdatedBy ">Updated By</label>
                                        <input name="UpdatedBy" id="UpdatedBy" readonly type="text" value="@UserName" placeholder="Created by" class="form-control form-control-sm Form_Elem" />
                                    </div>
                                    <div class="col-md-4 mt-1 mb-1 d-none">
                                        <label for="CreateDate d-none">Create Date</label>
                                        <input name="CreateDate" id="CreateDate" readonly type="text" value="@formattedDate" placeholder="Created by" class="form-control form-control-sm Form_Elem" />
                                    </div>
                                    <div class="col-md-4 mt-1 mb-1 d-none">
                                        <label for="UpdateDate">Update Date</label>
                                        <input name="UpdateDate" id="UpdateDate" readonly type="text" value="@formattedDate" placeholder="Created by" class="form-control form-control-sm Form_Elem" />
                                    </div>
                                    <div class="col-md-12 mt-3">
                                        <button type="button" id="Form_Delete_btn" style="display:none; width:80px;" class="btn ml-1 mr-1 btn-sm btn-danger">Delete</button>
                                        <button type="button" id="Form_Update_btn" style="display:none; width:80px;" class="btn ml-1 mr-1 btn-sm text-white btn-info">Update</button>
                                        <button type="button" id="Form_Save_btn" style=" width:80px;" class="btn ml-1 mr-1 btn-sm btn-success">Save</button>
                                        <button type="reset" id="Form_reset_btn" style=" width:80px;" class="btn ml-1 mr-1 btn-sm btn-dark">Reset</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="tab-pane p-3" id="All_Users" role="tabpanel">
                            <div class="row p-3  mt-2 border">
                                <div class="table-responsive">
                                    <table class="table table-bordered table-striped   table-hover table-bordered w-100" cellspacing="0" cellpadding="0" border="1" id="Table">
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Row end -->
        </div>
    </div>
</div>

<div class="modal" id="excelModal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Excel Sheet data</h5>
            <span class="close closeModalInstallments" data-bs-dismiss="modal" id="">&times;</span>
        </div>
        <div class="modal-body">
            <div class="card-body border">
                <div class="table-responsive" style="height:500px;">
                    <table class="table table-bordered table-striped table-hover w-100" cellspacing="0" cellpadding="0" border="1" id="excelTable">
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        function Loader() {
            $(".Loader1").toggleClass('d-none');
        }
        // import excel
        {
            $("#XLS").click(function (event) {
                event.preventDefault(); // Prevent the default behavior
                var table = $("#Table")[0];
                if (!table) {
                    console.error("Table not found");
                    return;
                }
                var columnsToExport = [
                    { index: 0, name: 'Sr No' },
                    { index: 3, name: 'BankId' },
                    { index: 4, name: 'Bank Name' },
                    { index: 5, name: 'Branch' },
                    { index: 6, name: 'IFSC Code' },
                    { index: 7, name: 'Swift Code' },
                    { index: 8, name: 'Address' },
                    { index: 9, name: 'Country' },
                    { index: 10, name: 'State' },
                    { index: 11, name: 'City' },
                    { index: 12, name: 'CntryId' },
                    { index: 13, name: 'StateId' }

                ];
                var filteredData = [];
                var columnNamesRow = [];
                columnsToExport.forEach(function (column) {
                    columnNamesRow.push(column.name);
                });
                filteredData.push(columnNamesRow);
                $(table).find('tbody tr').each(function (rowIndex, row) {
                    var rowData = [];
                    $(row).find('td').each(function (cellIndex, cell) {
                        columnsToExport.forEach(function (column) {
                            if (cellIndex === column.index) {
                                rowData.push(cell.textContent);
                            }
                        });
                    });
                    filteredData.push(rowData);
                });
                var ws = XLSX.utils.aoa_to_sheet(filteredData);
                var wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, "Sheet JS");
                XLSX.writeFile(wb, 'Project-Config.xlsx');
            });
        }
        //Get Dropdown Data
        {
            // GET Country
            $.ajax({
                url: '@Url.Action("COUNTRY", "GetDropdownData")',
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    if (response.length > 0) {
                        let list = "<option value=''>Select Country</option>";
                        for (var i = 0; i < response.length; i++) {
                            list += "<option value='" + response[i].CntryId + "'>" + response[i].CntryCode + "-" + response[i].CntryName + "</option>";
                        }
                        $("#CntryId").html(list);
                    }
                },
                error: function (error) {
                    notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                    console.error('Error:', error.responseText);
                }
            });
            // GET State
            $.ajax({
                url: '@Url.Action("STATE", "GetDropdownData")',
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    if (response.length > 0) {
                        let list = "<option value=''>Select State</option>";
                        for (var i = 0; i < response.length; i++) {
                            list += "<option value='" + response[i].StateId + "'>" + response[i].StateCode + "-" + response[i].StateName + "</option>";
                        }
                        $("#StateId").html(list);
                    }
                },
                error: function (error) {
                    notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                    console.error('Error:', error.responseText);
                }
            });

        }
        //Region Add
        {
            $("#Form_Save_btn").click(function () {
                let isValid = true;
                let formData = {};
                $("#BankMaster_Form input,select,textarea").each(function () {
                    var inputName = $(this).attr('name');
                    var inputValue = "";
                    if ($(this).find('textarea').lenght) {
                        inputValue = $(this).text();
                    } else {
                        inputValue = $(this).val();
                    }
                    var mandatoryfields = ["BankName", "BankBranch", "BankIFSCcd", "BankSwiftcd", "BankAddr", "BankCity"];
                    var inputElement = $("#" + inputName);
                    var inputId = inputElement.attr('id');
                    var labelText = $("label[for='" + inputId + "']").text();
                    if (mandatoryfields.includes(inputName) && inputValue === "") {
                        if (inputElement.hasClass("select2-hidden-accessible")) {
                            inputElement.next('.select2-container').addClass("select2-error");
                        } else {
                            inputElement.addClass("border-danger");
                        }
                        isValid = false;
                        notify("Please Fill " + labelText + " Details..!", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                        return false;
                    } else {
                        if (inputElement.hasClass("select2-hidden-accessible")) {
                            inputElement.next('.select2-container').removeClass("select2-error");
                        } else {
                            inputElement.removeClass("border-danger");
                        }
                    }
                    if (inputName !== undefined && inputName !== "" && inputName !== null) {

                        formData[inputName] = inputValue;
                    }
                });
                //Call Api
                if (isValid && formData != "") {
                    $.ajax({
                        url: '@Url.Action("POSTDATA", "BankMaster")',
                        type: 'POST',
                        dataType: 'json',
                        data: formData,
                        success: function (response) {
                            if (response !== "") {
                                $("#Form_reset_btn").click()
                                notify("Country Added Succefully ..!", "", "top", "right", "fa fa-check mr-2", "success", "animated fadeInRight", "animated fadeOutRight")
                                $("#BankMaster_Form")[0].reset();
                                LoadTableData();
                            }
                        },
                        error: function (error) {
                            notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                            console.error('Error:', error.responseText);
                        }
                    });
                }
            })
        }
        //Region Update
        {
            $("#Form_Update_btn").click(function () {
                let isValid = true;
                let formData = {};
                $("#BankMaster_Form input,select,textarea").each(function () {
                    var inputName = $(this).attr('name');
                    var inputValue = "";
                    if ($(this).find('textarea').lenght) {
                        inputValue = $(this).text();
                    } else {
                        inputValue = $(this).val();
                    }
                    var mandatoryfields = ["BankName", "BankBranch", "BankIFSCcd", "BankSwiftcd", "BankAddr", "BankCity"];
                    var inputElement = $("#" + inputName);
                    var inputId = inputElement.attr('id');
                    var labelText = $("label[for='" + inputId + "']").text();
                    if (mandatoryfields.includes(inputName) && inputValue === "") {
                        if (inputElement.hasClass("select2-hidden-accessible")) {
                            inputElement.next('.select2-container').addClass("select2-error");
                        } else {
                            inputElement.addClass("border-danger");
                        }
                        isValid = false;
                        notify("Please Fill " + labelText + " Details..!", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                        return false;
                    } else {
                        if (inputElement.hasClass("select2-hidden-accessible")) {
                            inputElement.next('.select2-container').removeClass("select2-error");
                        } else {
                            inputElement.removeClass("border-danger");
                        }
                    }
                    if (inputName !== undefined && inputName !== "" && inputName !== null) {

                        formData[inputName] = inputValue;

                    }
                });
                //Call Api
                if (isValid && formData !== "") {
                    $.ajax({
                        url: '@Url.Action("UPDATEDATA", "BankMaster")',
                        type: 'POST',
                        dataType: 'json',
                        data: formData,
                        success: function (response) {
                            if (response.success) {
                                $("#Form_reset_btn").click()
                                $("#BankMaster_Form")[0].reset();
                                LoadTableData();
                                HideBtn()
                                notify(response.message, "", "top", "right", "fa fa-check mr-2", "success", "animated fadeInRight", "animated fadeOutRight")
                            } else {
                                notify("Error To Updating Data", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                            }
                        },
                        error: function (error) {
                            notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                            console.error('Error:', error.responseText);
                        }
                    });
                }
            })
        }
        //Region Delete
        {
            $("#Form_Delete_btn").click(function () {
                Delete($("#BankId").val());
            })
            $(document).on("click", ".table_delete", function () {
                var $row = $(this).closest("tr");
                var id = $row.find('td.tbl_Main_ID').text();
                Delete(id);
            })
        }
        //Region Select Row Data
        {
            $(document).on("click", ".table_edit", function () {
                var $row = $(this).closest("tr");
                $row.addClass("active");
                bindrecord($row)
            })
            {
                function bindrecord($row) {
                    var rowObject = {};
                    $row.find('td').each(function (index) {
                        var $td = $(this);
                        var key = $td.closest('table').find('th').eq(index).text().trim().replace(/[.,()%\- ]/g, '');
                        if ($td.find('input').length) {
                            rowObject[key] = $td.find('input').val();
                        }
                        else if ($td.find('textarea').length) {
                            rowObject[key] = $td.find('textarea').val();
                        }
                        else if ($td.find('img').length) {
                            rowObject[key] = $td.find('img').attr("src");
                        } else if ($td.find('select').length) {
                            //  rowObject[key] = $td.find('select option:selected').text().trim();
                            //  rowObject['TaxCodeval'] = $td.closest('tr').find('.Taxc option:selected').val();
                            //  rowObject['UomEntryVal'] = $td.closest('tr').find('.Uomc1 option:selected').val();
                        } else {
                            rowObject[key] = $td.text().trim();
                        }
                    });
                    $("#BankId").val(rowObject.BankId)
                    $("#BankName").val(rowObject.BankName)
                    $("#BankAddr").val(rowObject.Address)
                    $("#BankBranch").val(rowObject.Branch)
                    $("#BankCity").val(rowObject.City)
                    $("#BankSwiftcd").val(rowObject.IFSCCode)
                    $("#BankIFSCcd").val(rowObject.SwiftCode)
                    $("#CntryId").val(rowObject.CntryId).trigger("change")
                    $("#StateId").val(rowObject.StateId).trigger("change")
                    $("#CreatedBy").val(rowObject.CreatedBy)
                    $("#UpdatedBy").val(rowObject.UpdatedBy)
                    var UpdateDate = SplitDatebyspace(rowObject.UpdateDate)
                    $("#UpdateDate").val(UpdateDate)
                    var CreateDate = SplitDatebyspace(rowObject.CreateDate)
                    $("#CreateDate").val(CreateDate)
                    $("#IsActive").val(rowObject.Active)
                    if (rowObject.Active == "Y") {
                        $("#IsActive").prop("checked", true);
                    }
                    if (rowObject.Active == "N") {
                        $("#IsActive").prop("checked", false);
                    }
                    ShowBtn()
                    $("#Create_User_Tab").click();
                }
            }
        }
        //Function to handle form reset
        {
            $("#Form_reset_btn").click(function () {
                $(".Form_Elem").removeClass("border-danger");
            });
        }
        //Function Btn Opration
        {
            $("#Form_reset_btn").click(function () { HideBtn() })
            function ShowBtn() {
                $("#Form_Delete_btn").show();
                $("#Form_Update_btn").show();
                $("#Form_Save_btn").hide();
            }
            function HideBtn() {
                $("#Form_Save_btn").show();
                $("#Form_Delete_btn").hide();
                $("#Form_Update_btn").hide();
            }
        }
        //region All functions
        {
            // Function to retrieve menu data
            LoadTableData();
            function LoadTableData() {
                $.ajax({
                    url: '@Url.Action("GET", "BankMaster")', // Update with your API endpoint for retrieving menu data
                    type: 'GET',
                    dataType: 'json',
                    success: function (response) {
                        ApplyDatatable(response, "Table")
                    },
                    error: function (error) {
                        notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight");
                        console.error('Error:', error.responseText);
                    }
                });
            }
            //format date
            function formatAndSetDate(inputDate) {
                const parts = inputDate.split(' ');
                const datePart = parts[0];
                const timePart = parts[1];
                const [day, month, year] = datePart.split('-');
                const formattedDate = `${year}-${month}-${day}`;
                const formattedDateTime = `${formattedDate} ${timePart}`;
                return formattedDate;
            }
            function SplitDatebyspace(inputDate) {
                const parts = inputDate.split(' ');
                return parts[0];

            }
            //Apply Datatable
            function ApplyDatatable(jsonData, Table_Id) {
                if ($.fn.DataTable.isDataTable('#' + Table_Id)) {
                    $('#' + Table_Id).DataTable().destroy();
                }

                $('#' + Table_Id).DataTable({
                    scrollX: true,
                    scrollY: '600px',
                    scrollCollapse: true,
                    autoWidth: false,
                    fixedHeader: true,
                    data: jsonData,
                    columns: [
                        {
                            data: null,
                            title: "Sr No",
                            className: 'tbl_Sr_no no-wrap text-center',
                            render: function (data, type, row, meta) {
                                return meta.row + 1;
                            }
                        },
                        {
                            data: null,
                            title: 'Action',
                            className: 'text-center',
                            render: function (data, type, row) {
                                // Customize the content of the image column
                                return '<i class="fa fa-edit table_edit text-primary mr-1"></i> <i class="fa fa-trash text-danger mr-2  table_delete"></i>';
                            }
                        },
                        {
                            data: 'IsActive',
                            title: 'Active',
                            className: 'text-center',
                            render: function (data, type, row) {
                                // Customize the content of the image column
                                if (data == "Y") {
                                    return `<center><label style="margin:0px!important; padding:0px!important;" class="tblswitch p-0 m-0">
                                                                                        <input type="checkbox" disabled value="`+ data + `" checked name="IsActive" class="tbltoggleSwitch form-control form-control-sm ">
                                                                                <span class="tblslider"></span>
                                                                                </label></center>`;
                                } else {
                                    return `<center><label class="tblswitch">
                                                                                            <input type="checkbox" disabled value="`+ data + `"  name="IsActive" class="tbltoggleSwitch form-control form-control-sm ">
                                                                                    <span class="tblslider"></span>
                                                                                </label></center>`;
                                }

                            }
                        },
                        { data: 'BankId', title: 'BankId', className: 'tbl_BankId d-none tbl_Main_ID' },
                        { data: 'BankName', title: 'Bank Name', className: 'tbl_BankName text-left' },
                        { data: 'BankBranch', title: 'Branch', className: 'tbl_BankBranch' },
                        { data: 'BankIFSCcd', title: 'IFSC Code', className: 'tbl_BankIFSCcd text-center' },
                        { data: 'BankSwiftcd', title: 'Swift Code', className: 'tbl_BankSwiftcd text-center' },
                        { data: 'BankAddr', title: 'Address', className: 'tbl_BankAddr' },
                        { data: 'CntryName', title: 'Country', className: 'tbl_CntryName ' },
                        { data: 'StateName', title: 'State', className: 'tbl_StateName' },
                        { data: 'BankCity', title: 'City', className: 'tbl_BankCity' },
                        { data: 'CntryId', title: 'CntryId', className: 'tbl_CntryId d-none' },
                        { data: 'StateId', title: 'StateId', className: 'tbl_StateId d-none' },
                        { data: 'CreatedBy', title: 'Created By', className: 'tbl_CreatedBy d-none' },
                        { data: 'CreateDate', title: 'Create Date', className: 'tbl_CreateDate d-none' },
                        { data: 'UpdatedBy', title: 'Updated By', className: 'tbl_UpdatedBy d-none' },
                        { data: 'UpdateDate', title: 'Update Date', className: 'tbl_UpdateDate d-none' },
                        // Add more columns as needed
                    ],
                    columnDefs: [
                        {
                            targets: '_all',
                            className: 'dt-no-wrap',
                            createdCell: function (td, cellData, rowData, row, col) {
                                $(td).css('padding', '5px');
                                $(td).attr('nowrap', 'nowrap');
                            }
                        }
                    ],
                    ordering: true,
                    paging: true,
                    retrieve: true,
                    searching: true,
                    responsive: true,
                    colReorder: false,
                    orderCellsTop: true,
                });
            }
            //Delete
            function Delete(ID) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'This Bank Is Permanetly Delete Form System..!',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Delete',
                    confirmButtonColor: 'red',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '@Url.Action("DELETE", "BankMaster")',
                            type: 'POST',
                            dataType: 'json',
                            data: { Id: ID },
                            success: function (response) {
                                if (response.success) {
                                    $("#BankMaster_Form")[0].reset();
                                    LoadTableData();
                                    $("#Form_reset_btn").click()
                                    HideBtn()
                                    notify(response.message, "", "top", "right", "fa fa-check mr-2", "success", "animated fadeInRight", "animated fadeOutRight")
                                    Swal.fire('Deleted!', 'Your data has been deleted.', 'success');
                                } else {
                                    notify("Error To Updating Data", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                                }
                            },
                            error: function (error) {
                                notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                                console.error('Error:', error.responseText);
                            }
                        });
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        Swal.fire('Cancelled', 'Your action has been cancelled.', 'error');
                    }
                });

            }
        }
        // Region Navigation
        {
            var $table = $("#Table");
            $table.find("tbody tr:first").addClass("active");
            $(".btn_forward").click(function () {
                var $currentRow = $table.find(".active");
                var $nextRow = $currentRow.next("tr");
                if ($nextRow.length > 0) {
                    $currentRow.removeClass("active");
                    $nextRow.addClass("active");
                    bindrecord($nextRow);
                } else {
                    var $firstRow = $table.find("tbody tr:first");
                    $table.find(".active").removeClass("active");
                    $firstRow.addClass("active");
                    bindrecord($firstRow);

                }
            });
            $(".btn_backward").click(function () {
                var $currentRow = $table.find(".active");
                var $prevRow = $currentRow.prev("tr");
                if ($prevRow.length > 0) {
                    $currentRow.removeClass("active");
                    $prevRow.addClass("active");
                    bindrecord($prevRow);
                } else {
                    var $lastRow = $table.find("tr:last");
                    $table.find(".active").removeClass("active");
                    $lastRow.addClass("active");
                    bindrecord($lastRow);
                }
            });
            $(".btn_first").click(function () {
                var $firstRow = $table.find("tbody tr:first");
                $table.find(".active").removeClass("active");
                $firstRow.addClass("active");
                bindrecord($firstRow);
            });
            $(".btn_last").click(function () {
                var $lastRow = $table.find("tr:last");
                $table.find(".active").removeClass("active");
                $lastRow.addClass("active");
                bindrecord($lastRow);
            });
            $(".btn_reload").click(function () {
                $("#BankMaster_Form")[0].reset();
                $("#Form_reset_btn").click();
                HideBtn()
            });
        }
        // //Bulk Post
        // {
        //     var objectsArray = []; // Initialize an empty array to store the parsed data

        //     $('#Import').on('change', function () {
        //         var file = this.files[0];
        //         if (file) {
        //             var reader = new FileReader();
        //             reader.onload = function (e) {
        //                 var data = new Uint8Array(e.target.result);
        //                 var workbook = XLSX.read(data, { type: 'array' });
        //                 var firstSheet = workbook.Sheets[workbook.SheetNames[0]];
        //                 var jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });

        //                 if (jsonData.length > 0) {
        //                     var headers = jsonData[0];
        //                     var rows = jsonData.slice(1);
        //                     objectsArray = rows.map(function (row) {
        //                         var obj = {};
        //                         row.forEach(function (cell, i) {
        //                             obj[headers[i]] = cell;
        //                         });
        //                         return obj;
        //                     });
        //                 }
        //             };
        //             reader.readAsArrayBuffer(file);
        //         }
        //     });

        //     $('#Upload_Xls').on('click', function () {
        //         Loader()

        //         $.ajax({
        //             url: "@Url.Action("POSTDATAExcel", "BankMaster")",
        //             method: "POST",
        //             data: { data: JSON.stringify(objectsArray) },
        //             success: function (response) {
        //                 if (response !== "") {
        //                     var jsondata = JSON.parse(response);
        //                     if (jsondata.length > 0) {
        //                         createExcelFile(jsondata);
        //                     } else {
        //                         Swal.fire("Bulk Post Successfull...!", "", "success")
        //                         LoadTableData();
        //                     }
        //                 }
        //                 Loader()
        //                 $('#Import').val("")
        //             },
        //             error: function (err) {
        //                 console.log(err.responseText)
        //                 Loader()
        //             }
        //         });
        //     });

        //     function createExcelFile(jsonData) {
        //         const worksheet = XLSX.utils.json_to_sheet(jsonData);
        //         // Create a new workbook
        //         const workbook = XLSX.utils.book_new();
        //         XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
        //         // Convert workbook to binary string
        //         const excelBuffer = XLSX.write(workbook, {
        //             bookType: "xlsx",
        //             type: "array"
        //         });
        //         // Create a blob from the binary string
        //         const blob = new Blob([excelBuffer], { type: "application/octet-stream" });
        //         // Create a download link and trigger the download
        //         const link = document.createElement('a');
        //         link.href = URL.createObjectURL(blob);
        //         link.download = 'error_log.xlsx';
        //         link.click();
        //         // Clean up the URL object
        //         URL.revokeObjectURL(link.href);
        //     }
        // }
        // bulk Post
        {
            $('#DownloadTemplete').click(function () {
                var value = 'Bank_Mst';
                $.ajax({
                    type: "get",
                    url: "@Url.Action("GetHeader", "UnitMaster")",
                    data: { data: value },
                    contentType: "application/json; charset=utf-8",
                    success: function (headerData) {
                        var headers = [];

                        // Populate headers array with column names and metadata
                        for (var i = 0; i < headerData.length; i++) {
                            var header = headerData[i].name;
                            var dp_field_dname = headerData[i].name;
                            var MYDATA_TYPE = headerData[i].dataType;
                            var MYLength = headerData[i].maxLength;
                            var headerText = `${dp_field_dname},(${MYDATA_TYPE}, ${MYLength})`;
                            var tooltipText = '';
                            if (header.includes('CntryId')) {
                                tooltipText = "Tooltip for use Country Master Sheet for data use in " + header;
                            }
                            if (header.includes('StateId')) {
                                tooltipText = "Tooltip for Use State Master sheet for data use in " + header;
                            }

                            var headerObj = {
                                text: headerText,
                                tooltip: tooltipText
                            };

                            headers.push(headerObj);
                        }

                        const worksheetData = [headers.map(header => header.text)];
                        const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);
                        const columnWidth = 30; // Set desired width (in characters)
                        worksheet['!cols'] = headers.map(() => ({ width: columnWidth }));

                        headers.forEach((header, index) => {
                            if (header.tooltip) {
                                const cellAddress = XLSX.utils.encode_cell({ r: 0, c: index });
                                worksheet[cellAddress].c = [{
                                    t: header.tooltip,
                                    a: "system"
                                }];
                            }
                        });

                        const workbook = XLSX.utils.book_new();
                        XLSX.utils.book_append_sheet(workbook, worksheet, 'Headers');

                        // Create an array of AJAX calls
                        const ajaxCalls = [
                            { url: "@Url.Action("GET", "StateMaster")", sheetName: 'State Master ' },
                            { url: "@Url.Action("GET", "CountryMaster")", sheetName: 'Country Master' }
                        ];

                        // Function to process AJAX response and add sheets
                        function addSheetToWorkbook(data, sheetName) {
                            if (data.length > 0) {
                                var columnNames = Object.keys(data[0]);
                                var sheetData = [columnNames];
                                for (var i = 0; i < data.length; i++) {
                                    var row = [];
                                    for (var j = 0; j < columnNames.length; j++) {
                                        row.push(data[i][columnNames[j]]);
                                    }
                                    sheetData.push(row);
                                }
                                const worksheet = XLSX.utils.aoa_to_sheet(sheetData);
                                worksheet['!cols'] = columnNames.map(() => ({ width: columnWidth }));
                                XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);
                            }
                        }

                        // Perform all AJAX calls
                        $.when.apply($, ajaxCalls.map(call => $.ajax({
                            type: "get",
                            url: call.url,
                            contentType: "application/json; charset=utf-8"
                        })))
                            .then(function (...responses) {
                                responses.forEach((response, index) => {
                                    addSheetToWorkbook(response[0], ajaxCalls[index].sheetName);
                                });

                                const excelBuffer = XLSX.write(workbook, {
                                    bookType: 'xlsx',
                                    type: 'array'
                                });
                                const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });
                                const link = document.createElement('a');
                                link.href = URL.createObjectURL(blob);
                                link.download = `${value}.xlsx`; // Corrected filename format
                                link.click();
                                URL.revokeObjectURL(link.href);
                            })
                            .fail(function (err) {
                                console.error('Error fetching data:', err);
                            });
                    },
                    error: function (error) {
                        console.error('Error fetching data:', error);
                    }
                });
            });

            $('#Upload_Xls').on('click', function () {
                Loader();

                var input = document.getElementById('Import');
                var file = input.files[0];
                var reader = new FileReader();

                reader.onload = function (e) {
                    var data = new Uint8Array(e.target.result);
                    let workbook = XLSX.read(data, { type: 'array' });
                    let firstSheetName = workbook.SheetNames[0];
                    let worksheet = workbook.Sheets[firstSheetName];
                    let excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                    let Eheaders = excelData[0];
                    let headers = Eheaders.map(header => {
                        // Split the header on ',' and take the first part
                        return header.split(',')[0];
                    });
                    let rows = excelData.slice(1);
                    let dataArray = rows.map(row => {
                        let obj = {};
                        row.forEach((cell, i) => {
                            obj[headers[i]] = cell;
                        });
                        return obj;
                    });
                    $.ajax({
                        url: "@Url.Action("POSTDATAExcel", "BankMaster")",
                        method: "POST",
                        data: { data: JSON.stringify(dataArray) },
                        success: function (response) {
                            if (response !== "") {
                                var jsondata = JSON.parse(response);
                                if (jsondata.length > 0) {
                                    createExcelFile(jsondata);
                                } else {
                                    Swal.fire("Bulk Post Successful...!", "", "success");
                                    LoadTableData();
                                }
                            }
                            Loader();
                            $('#Import').val("");
                        },
                        error: function (err) {
                            console.log(err.responseText);
                            Loader();
                        }
                    });
                };

                reader.readAsArrayBuffer(file);
            });

            function createExcelFile(jsonData) {
                const worksheet = XLSX.utils.json_to_sheet(jsonData);
                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
                const excelBuffer = XLSX.write(workbook, {
                    bookType: "xlsx",
                    type: "array"
                });
                const blob = new Blob([excelBuffer], { type: "application/octet-stream" });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'error_log.xlsx';
                link.click();
                URL.revokeObjectURL(link.href);
            }
        }


    });
</script>

