@{
    string? UserName = ViewContext.HttpContext.Session.GetString("UserName");
    DateTime currentDate = DateTime.Now;
    string formattedDate = currentDate.ToString("dd-MM-yyyy");
}
<div class="col-xl-12 col-md-12">
    <div class="card table-card p-2 mb-0">
        <div class="row">
            <div class="col-md-12">
                <button class="btn text-center btn-sm btn-primary btn_first p-2" title="Get First Document" style="width:50px; font-size:18px;">
                    <i class="fa fa-arrow-circle-o-left"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary btn_backward p-2" title="Get Previous Record" style="width:50px; font-size:18px;">
                    <i class="fas fa-long-arrow-alt-left"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary p-2 btn_forward" title="Get Next Record" style="width:50px; font-size:18px;">
                    <i class="fas fa-long-arrow-alt-right"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary btn_last p-2" title="Get Last Document" style="width:50px; font-size:18px;">
                    <i class="fa fa-arrow-circle-o-right"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary btn_reload p-2" title="Reload" style="width:50px; font-size:18px;">
                    <i class="fa fa-refresh"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary p-2 " id="XLS" title="Export" style="width:50px; font-size:18px;">
                    <i class="fa fa-arrow-circle-o-up"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="card table-card mt-2">
        <div class="card-header">
            <h5 class="webtitle">With Holding Tax </h5>
            <div class="card-header-right">
                <ul class="list-unstyled card-option">
                    <li><i class="fa fa fa-wrench open-card-option"></i></li>
                    <li><i class="fa fa-window-maximize full-card"></i></li>
                    <li><i class="fa fa-minus minimize-card"></i></li>
                    <li><i class="fa fa-refresh reload-card"></i></li>
                    <li hidden><i class="fa fa-trash close-card"></i></li>
                </ul>
            </div>
        </div>
        <div class="card-block shadow">
            <!-- Row start -->
            <div class="row p-2">
                <div class="col-lg-12 col-xl-12">
                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs tabs" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" data-toggle="tab" id="Create_wtholdingtax_tab" href="#Create_wtholdingtax" role="tab">With Holding Tax</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#All_Contact" role="tab">All  With Holding Tax</a>
                        </li>
                    </ul>
                    <!-- Tab panes -->
                    <div class="tab-content tabs card-block">
                        <div class="tab-pane active p-0 m-0 mt-2" id="Create_wtholdingtax" role="tabpanel">
                            <form id="WithodlingTax_Mst_form" class="w-100 mt-4 p-4 border">
                                <div class="row justify-content-start mt-1 mb-3 p-1">
                                    <div class="col-md-6 col-lg-6">
                                        <label class="switch">
                                            <input type="checkbox" value="Y" checked name="IsActive" id="IsActive" class="toggleSwitch form-control form-control-sm">
                                            <span class="slider"></span>
                                        </label>
                                    </div>
                                    <div class="col-md-6 col-lg-6">
                                        <div class="row align-items-center">
                                            <div class="col-md-3"></div>
                                            <div class="col-md-3">
                                                <button type="button" id="DownloadTemplete" class="btn btn-sm btn-primary w-100">
                                                    Download Template
                                                </button>
                                            </div>
                                            <div class="col-md-3">
                                                <input class='p-1 form-control form-control-sm selectfile' id="Import" type='file' placeholder='Choose File' />
                                            </div>
                                            <div class="col-md-3 d-flex justify-content-end">
                                                <button type="button" id="Upload_Xls" class="btn btn-sm btn-success w-100">Upload</button>
                                                <button type="button" class="btn btn-sm btn-primary" id="ViewExcel"><i class="fa fa-eye"></i></button>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <hr>
                                <div class="row mt-2">
                                    <input hidden name="WTId" id="WTId" value="" type="text" placeholder="" class="form-control form-control-sm " />
                                    <!-- BP ID and Title -->
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="WTCode">Code</label>
                                        <input name="WTCode" id="WTCode" type="text" placeholder="WT Code " class="form-control form-control-sm  WithodlingTax_form"> </input>
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="TDSType">TDS Type</label>
                                        <select name="TDSType" id="TDSType" class="form-control form-control-sm   WithodlingTax_form">
                                            <option value="">Select TDS Type</option>
                                            <option value="I">eTDS</option>
                                            <option value="L">GST TDS</option>
                                            <option value="T">GST TCS</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="WTName">WTName</label>
                                        <input name="WTName" id="WTName" type="text" placeholder="Name" oninput="MaxLengthInp(this,)" class="form-control form-control-sm WithodlingTax_form" />
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="Section">Section</label>
                                        <select name="Section" id="Section" class="form-control form-control-sm   WithodlingTax_form">
                                            <option value="">Select Section</option>
                                            <option value="192B">192B</option>
                                            <option value="193">193</option>
                                            <option value="194">194</option>
                                            <option value="194A">194A</option>
                                            <option value="194B">194B</option>
                                            <option value="194C">194C</option>
                                            <option value="194D">194D</option>
                                            <option value="194F">194F</option>
                                            <option value="194G">194G</option>
                                            <option value="194H">194H</option>
                                            <option value="194I">194I</option>
                                            <option value="194J">194J</option>
                                            <option value="206C">206C</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="Assessee">Assessee</label>
                                        <select name="Assessee" id="Assessee" class="form-control form-control-sm   WithodlingTax_form">
                                            <option value="">Select Assessee Type</option>
                                            <option value="COM">COM</option>
                                            <option value="HUF">HUF</option>
                                            <option value="IND">IND</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="Category">Category</label>
                                        <select name="Category" id="Category" class="form-control form-control-sm   WithodlingTax_form">
                                            <option value="">Select Category Type</option>
                                            <option value="P">Payment</option>
                                            <option value="N">Invoice</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="EffecDate">Effective Date</label>
                                        <div class="input-container">
                                            <input name="EffecDate" id="EffecDate" type="date" readonly placeholder="dd/mm/yyyy" class="form-control form-control-sm  WithodlingTax_form" />
                                        </div>
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="Rate">Rate </label>
                                        <input name="Rate" id="Rate" type="number" placeholder="Rate" readonly oninput="MaxLengthInp(this,20)" class="form-control form-control-sm WithodlingTax_form" />
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="BaseType">Base Type</label>
                                        <select name="BaseType" id="BaseType" class="form-control form-control-sm   WithodlingTax_form">
                                            <option value="">Select Base Type</option>
                                            <option value="G">GROSS</option>
                                            <option value="N">NET</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="LocId">Location</label>
                                        <select name="LocId" id="LocId" type="text" placeholder="Location" class="form-control  form-control-sm WithodlingTax_form">
                                            <option value="0">Select Location</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="ReturnType">Return Type</label>
                                        <select name="ReturnType" id="ReturnType" class="form-control form-control-sm   WithodlingTax_form">
                                            <option value="">Select Return Type</option>
                                            <option value="27">27</option>
                                            <option value="26">26</option>
                                        </select>
                                    </div>

                                </div>

                                <div class="row">
                                    <div class="col-md-3 mt-1 mb-1 d-none">
                                        <label for="UpdateDate">Updated On</label>
                                        <input readonly name="UpdateDate" id="UpdateDate" value="@formattedDate" type="text" placeholder="dd/mm/yy" class="form-control form-control-sm WithodlingTax_form" />
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1  d-none">
                                        <label for="UpdatedBy">Updated By</label>
                                        <input readonly name="UpdatedBy" id="UpdatedBy" value="@UserName" type="text" placeholder="Updated By" class="form-control form-control-sm WithodlingTax_form" />
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1  d-none">
                                        <label for="CreateDate">Created On</label>
                                        <input readonly name="CreateDate" id="CreateDate" value="@formattedDate" type="text" placeholder="dd/mm/yy" class="form-control form-control-sm WithodlingTax_form" />
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1  d-none">
                                        <label for="CreatedBy">Created By</label>
                                        <input readonly name="CreatedBy" id="CreatedBy" value="@UserName" type="text" placeholder="Created By" class="form-control form-control-sm WithodlingTax_form" />
                                    </div>
                                    <!-- Buttons -->
                                    <div class="col-md-6 mt-3">
                                        <button type="button" id="Form_Delete_btn" style="display:none; width:80px;" class="btn ml-1 mr-1 btn-sm btn-danger">Delete</button>
                                        <button type="button" id="Form_Update_btn" style="display:none; width:80px;" class="btn ml-1 mr-1 btn-sm text-white btn-info">Update</button>
                                        <button type="button" id="Form_Save_btn" style=" width:80px;" class="btn ml-1 mr-1 btn-sm btn-success">Save</button>
                                        <button type="reset" id="Form_reset_btn" style=" width:80px;" class="btn ml-1 mr-1 btn-sm btn-dark">Reset</button>
                                    </div>
                                    <div class="text-right col-md-6  mt-3">
                                        <button type="button" id="" style=" width:150px;" class="btn ml-1 mr-1 btn-sm btn-primary WholdingDef">Add Tax Defination</button>
                                    </div>

                                </div>


                            </form>
                        </div>

                        <div class="tab-pane p-3" id="All_Contact" role="tabpanel">
                            <div class="row p-3 mt-2 border">
                                <div class="table-responsive">
                                    <table class="table table-bordered table-striped table-hover table-bordered w-100" id="Table">
                                        <!-- Table Content Goes Here -->
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Row end -->
        </div>
    </div>
</div>
<!-- modals -->
<div class="modal" id="AddWDefinationmodal">
    <div class="modal-content">
        <div class="card-header bg-white border-0 p-1">
            <div class="row">
                <div class="col-6">
                    <h4>Defination Tax</h4>
                </div>
                <div class="col-6 text-right  ">
                    <span class="close closeModal" id="">&times;</span>
                </div>
            </div>
        </div>
        <div class="card-body border">
            <div class="row mb-3 mt-1">
                <div class="col-md-10"></div>
                <div class="col-md-2  text-right mb-1">
                    <button type="button" id="AddWDefination" class="btn btn-sm btn-primary mt-3 btn-sm ">Add New Row</button>
                </div>
            </div>
            <div class="table-responsive" style="height:500px;">
                <table class="table border  table-striped   table-hover table-bordered w-100" id="Wholdingtbl">
                    <thead>
                        <tr>
                            <th class='p-2 text-center' nowrap>Sr.No</th>
                            <th class='p-2 text-center' nowrap>Action</th>
                            <th class='p-2 ' nowrap>Effective Date</th>
                            <th class='p-2 text-right' nowrap>Rate</th>
                            <th class='p-2 text-right' nowrap>TDS Rate</th>
                            <th class='p-2 text-center' nowrap hidden>WTDetId</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
            <div class="row mb-3">
                <div class="col-md-12">
                    @*    <button type="button" id="Unit_def_Btn" class="btn ml-1 mr-1 btn-sm btn-success">Save</button> *@
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="excelModal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Excel Sheet data</h5>
            <span class="close closeModalInstallments" data-bs-dismiss="modal" id="">&times;</span>
        </div>
        <div class="modal-body">
            <div class="card-body border">
                <div class="table-responsive" style="height:500px;">
                    <table class="table table-bordered table-striped table-hover w-100" cellspacing="0" cellpadding="0" border="1" id="excelTable">
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        function Loader() {
            $(".Loader1").toggleClass('d-none');
        }
        {
            // Modal open
            {
                $(".WholdingDef").click(function () {
                    $("#AddWDefinationmodal").fadeIn();
                });
                // Function to load withholding table data
                function loadWithholdingTableData(id) {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("GETWTHOLDING", "WithHoldingTax")',
                        contentType: 'application/json',
                        data: { id: id },
                        success: function (response) {
                            if (response.length != 0) {
                                $('#Wholdingtbl tbody').empty(); // Clear existing table rows
                                for (var j = 0; j < response.length; j++) {
                                    var newRow = '<tr>' +
                                        '<td class="text-center">' + parseInt(j + 1) + '</td>' + // Sr.No column with row count
                                        '<td class="text-center"><i class="fa fa-trash text-danger mt-2 delete-table"></i></td>'; // Delete button column
                                    var effecDateParts = (response[j].EffecDate ?? '').split('-'); // assuming 'EffecDate' format is 'mm-yy-yyyy'
                                    if (effecDateParts.length === 3) {
                                        var day = effecDateParts[0];
                                        var month = effecDateParts[1];
                                        var year = effecDateParts[2];
                                        var formattedDate = year + '-' + month + '-' + day;
                                        newRow += '<td><input type="date" class="form-control form-control-sm effect-date-input" placeholder="Effect Date" value="' + formattedDate + '" ></td>';
                                    } else {
                                        // Handle invalid date format or empty 'EffecDate'
                                        newRow += '<td><input type="date" class="form-control form-control-sm effect-date-input" placeholder="Effect Date" value=""></td>';
                                    }
                                    newRow += '<td><input type="number" class="form-control text-right form-control-sm rate-input" placeholder="Rate" value="' + ((response[j].Rate) ?? '') + '" ></td>';
                                    newRow += '<td><input type="number" class="form-control text-right form-control-sm tds-rate-input" placeholder="TDS Rate" value="' + ((response[j].TdsRate) ?? '') + '" ></td>';
                                    newRow += '<td class="d-none"><input type="text" class="form-control form-control-sm wtdet-id-input" placeholder="WTDetId" value="' + ((response[j].WTDetId) ?? '') + '" ></td>';
                                    newRow += '</tr>';

                                    $('#Wholdingtbl tbody').append(newRow); // Append the new row to the table
                                }
                                var lastRow = $('#Wholdingtbl tbody tr:last');
                                var effectDateInput = lastRow.find(".effect-date-input").val();
                                var rateInput = lastRow.find(".rate-input").val();
                                $('#EffecDate').val(effectDateInput);
                                $('#Rate').val(rateInput);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error loading table data:', error);
                        }
                    });
                }

                $(document).on('change', ".tabledata", function () {
                    var lastRow = $('#Wholdingtbl tbody tr:last');
                    var effectDateInput = lastRow.find(".effect-date-input").val();
                    var rateInput = lastRow.find(".rate-input").val();
                    $('#EffecDate').val(effectDateInput);
                    $('#Rate').val(rateInput);

                });

                // Click event for adding rows
                // Click event for adding rows
                $("#AddWDefination").click(function () {
                    var index = $('#Wholdingtbl tbody tr').length;
                    var newRow = '<tr>' +
                        '<td class="text-center">' + parseInt(index + 1) + '</td>' + // Sr.No column with row count
                        '<td class="text-center"><i class="fa fa-trash text-danger mt-2 delete-table"></i></td>'; // Delete button column

                    newRow += '<td class=""><input type="date" class="form-control form-control-sm tabledata effect-date-input" placeholder="Effect Date"></td>';
                    newRow += '<td class=""><input type="number" class="form-control text-right form-control-sm tabledata rate-input" placeholder="Rate"></td>';
                    newRow += '<td class=""><input type="number" class="form-control text-right form-control-sm tds-rate-input" placeholder="TDS Rate"></td>';
                    newRow += '<td class="d-none"><input type="text" class="form-control form-control-sm wtdet-id-input" placeholder="WTDetId"></td>';

                    $('#Wholdingtbl tbody').append(newRow); // Append the new row to the table
                });

                // Click event for saving data
                // Define AddTableData function outside click event handler
                function AddTableData(WTId) {
                    var tableData = [];
                    $('#Wholdingtbl tbody tr').each(function (index) {
                        var rowData = {
                            EffecDate: $(this).find('.effect-date-input').val(),
                            Rate: $(this).find('.rate-input').val(),
                            TdsRate: $(this).find('.tds-rate-input').val(),
                            WTDetId: $(this).find('.wtdet-id-input').val(), // Comma added here
                            WTId: WTId,
                        };
                        tableData.push(rowData);
                    });
                    // Log the tableData to console for debugging
                    return tableData; // Return tableData from the function
                }

                // Click event for saving data
                // Define a function to save data
                function saveData(id) {
                    var tableData = [];
                    $('#Wholdingtbl tbody tr').each(function (index) {
                        var rowData = {
                            EffecDate: $(this).find('.effect-date-input').val(),
                            Rate: $(this).find('.rate-input').val(),
                            TdsRate: $(this).find('.tds-rate-input').val(),
                            WTDetId: $(this).find('.wtdet-id-input').val(), // Comma added here
                            WTId: id,
                        };
                        tableData.push(rowData);
                    });
                    var isValid = true; // Define your validation logic here
                    if (isValid && tableData.length > 0) {
                        $.ajax({
                            url: '@Url.Action("SAVEWTHOLDING", "WithHoldingTax")',
                            type: 'POST',
                            dataType: 'json',
                            data: JSON.stringify(tableData),
                            contentType: 'application/json',
                            success: function (response) {
                                if (response !== "") {
                                    // notify("With Holding Tax Added Successfully.", "", "top", "right", "fa fa-check mr-2", "success", "animated fadeInRight", "animated fadeOutRight");
                                    // Optionally, you might update your UI or perform other actions after successful saving
                                }
                            },
                            error: function (xhr, status, error) {
                                notify(xhr.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight");
                                console.error('Error:', error);
                            }
                        });
                    } else {
                        // Handle case where data is not valid or tableData is empty
                        notify("Invalid data or empty table data.", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight");
                    }
                }
                // Click event for deleting rows
                $('#Wholdingtbl tbody').on('click', '.delete-table', function () {
                    var row = $(this).closest('tr');
                    var id = row.find('.wtdet-id-input').val(); // Get the WTDetId from the hidden input

                    if (id) {
                        Swal.fire({
                            title: 'Are you sure?',
                            text: 'This data will be permanently deleted!',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Delete',
                            confirmButtonColor: 'red',
                            cancelButtonText: 'Cancel'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $.ajax({
                                    url: '@Url.Action("DELETEWTHOLDING", "WithHoldingTax")',
                                    type: 'POST',
                                    data: { id: id },
                                    success: function (response) {
                                        if (response.success) {
                                            // Load data after successful deletion
                                            loadWithholdingTableData($('#WTId').val());
                                            updatedata(); // <-- Corrected syntax
                                            // Bind values from the last row to main form fields
                                          
                                            Swal.fire('Deleted!', 'Your data has been deleted.', 'success');
                                        } else {
                                            Swal.fire('Error', 'Error deleting data.', 'error');
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        console.error('Error deleting data:', error);
                                        Swal.fire('Error', 'Error deleting data.', 'error');
                                    }
                                });
                            }
                        });
                    } else {
                        row.remove(); // Remove the row from the table if WTDetId is not present
                    }
                });

                function updatedata() {
                    var date = $('#EffecDate').val();
                    var rate = $('#Rate').val();
                    var WTId = $('#WTId').val();

                    $.ajax({
                        url: '@Url.Action("UPDATEHEDERDATA", "WithHoldingTax")',
                        type: 'POST',
                        dataType: 'json',
                        data: { date: date, rate: rate, WTId: WTId },
                        success: function (response) {

                            if (response.length > 0) {
                            }
                        },
                        error: function (error) {
                            notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight");
                            console.error('Error:', error.responseText);
                        }
                    });
                }

                $.ajax({
                    url: '@Url.Action("LOCATION", "GetDropdownData")',
                    type: 'GET',
                    dataType: 'json',
                    success: function (response) {
                        if (response.length > 0) {
                            let list = "<option value=''>Select Location</option>";
                            for (var i = 0; i < response.length; i++) {
                                list += "<option value='" + response[i].LocId + "'>" + response[i].LocCode + "-" + response[i].LocName + "</option>";
                            }
                            $("#LocId").html(list);
                        }
                    },
                    error: function (error) {
                        notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                        console.error('Error:', error.responseText);
                    }
                });

            }
            var dateOnly = "";
            $("#EffecDate").change(function () {
                dateOnly = "";
                var dateString = $(this).val();
                var dateAndTime = dateString.split(" ");
                dateOnly = dateAndTime[0];
            })
            //Region Add User
            {
                $("#Form_Save_btn").click(function () {
                    let isValid = true;
                    let formData = {};
                    $("#WithodlingTax_Mst_form input,select,textarea").each(function () {
                        var inputName = $(this).attr('name');
                        var inputValue = "";
                        if ($(this).find('textarea').lenght) {
                            inputValue = $(this).text();
                        } else {
                            inputValue = $(this).val();
                        }
                        var mandatoryfields = ["WTName", "WTCode", "Rate", "LocId", "Assessee", "Category", "BaseType", "Section", "EffecDate", "TDSType", "ReturnType"];
                        var inputElement = $("#" + inputName);
                        var inputId = inputElement.attr('id');
                        var labelText = $("label[for='" + inputId + "']").text();
                        if (mandatoryfields.includes(inputName) && inputValue === "") {
                            if (inputElement.hasClass("select2-hidden-accessible")) {
                                inputElement.next('.select2-container').addClass("select2-error");
                            } else {
                                inputElement.addClass("border-danger");
                            }
                            isValid = false;
                            notify("Please Fill " + labelText + " Details..!", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                            return false;
                        } else {
                            if (inputElement.hasClass("select2-hidden-accessible")) {
                                inputElement.next('.select2-container').removeClass("select2-error");
                            } else {
                                inputElement.removeClass("border-danger");
                            }
                        }
                        if (inputName !== undefined && inputName !== "" && inputName !== null) {

                            formData[inputName] = inputValue;

                        }
                    });
                    //Call Api
                    if (isValid && formData != "") {
                        $.ajax({
                            url: '@Url.Action("POSTDATA", "WithHoldingTax")',
                            type: 'POST',
                            dataType: 'json',
                            data: formData,
                            success: function (response) {
                                if (response !== "") {
                                    saveData(response.lastId);
                                    notify("With Holding Tax Added Succefully ..!", "", "top", "right", "fa fa-check mr-2", "success", "animated fadeInRight", "animated fadeOutRight")
                                    $("#WithodlingTax_Mst_form")[0].reset();
                                    $('#Wholdingtbl tbody').html("")
                                    $('#Form_reset_btn').click()

                                    LoadTableData();
                                }
                            },
                            error: function (error) {
                                notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                                console.error('Error:', error.responseText);
                            }
                        });
                    }
                })
            }
            //Region Update User
            {
                $("#Form_Update_btn").click(function () {
                    let isValid = true;
                    let formData = {};
                    $("#WithodlingTax_Mst_form input,select,textarea").each(function () {
                        var inputName = $(this).attr('name');
                        var inputValue = "";
                        if ($(this).find('textarea').lenght) {
                            inputValue = $(this).text();
                        } else {
                            inputValue = $(this).val();
                        }
                        var mandatoryfields = ["WTId", "WTName", "WTCode", "Rate", "LocId", "Assessee", "Category", "BaseType", "Section", "EffecDate", "TDSType", "ReturnType"];
                        var inputElement = $("#" + inputName);
                        var inputId = inputElement.attr('id');
                        var labelText = $("label[for='" + inputId + "']").text();
                        if (mandatoryfields.includes(inputName) && inputValue === "") {
                            if (inputElement.hasClass("select2-hidden-accessible")) {
                                inputElement.next('.select2-container').addClass("select2-error");
                            } else {
                                inputElement.addClass("border-danger");
                            }
                            isValid = false;
                            notify("Please Fill " + labelText + " Details..!", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                            return false;
                        } else {
                            if (inputElement.hasClass("select2-hidden-accessible")) {
                                inputElement.next('.select2-container').removeClass("select2-error");
                            } else {
                                inputElement.removeClass("border-danger");
                            }
                        }
                        if (inputName !== undefined && inputName !== "" && inputName !== null) {

                            formData[inputName] = inputValue;

                        }
                    });
                    //Call Api
                    if (isValid && formData !== "") {
                        $.ajax({
                            url: '@Url.Action("UPDATEDATA", "WithHoldingTax")',
                            type: 'POST',
                            dataType: 'json',
                            data: formData,
                            success: function (response) {
                                if (response.success) {
                                    saveData(response.lastId);
                                    $("#WithodlingTax_Mst_form")[0].reset();
                                    $('#Form_reset_btn').click()
                                    $('#Wholdingtbl tbody').html("")
                                    LoadTableData();
                                    HideBtn()
                                    notify(response.message, "", "top", "right", "fa fa-check mr-2", "success", "animated fadeInRight", "animated fadeOutRight")
                                } else {
                                    notify("Error To Updating Data", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                                }
                            },
                            error: function (error) {
                                notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                                console.error('Error:', error.responseText);
                            }
                        });
                    }
                })
            }
            //Region Delete
            {
                $("#Form_Delete_btn").click(function () {
                    Delete($("#WTId").val());
                })
                $(document).on("click", ".table_delete", function () {
                    var $row = $(this).closest("tr");
                    var id = $row.find('td.tbl_Main_ID').text();
                    Delete(id);
                })
            }
            //Region Select Row Data
            {
                $(document).on("click", ".table_edit", function () {
                    var $row = $(this).closest("tr");
                    $row.addClass("active");
                    bindrecord($row)
                })
                function bindrecord($row) { 
                    var rowObject = {};
                    $row.find('td').each(function (index) {
                        var $td = $(this);
                        var key = $td.closest('table').find('th').eq(index).text().trim().replace(/[.,()%\- ]/g, '');
                        if ($td.find('input').length) {
                            rowObject[key] = $td.find('input').val();
                        }
                        else if ($td.find('textarea').length) {
                            rowObject[key] = $td.find('textarea').val();
                        }
                        else if ($td.find('img').length) {
                            rowObject[key] = $td.find('img').attr("src");
                        } else if ($td.find('select').length) {
                            //  rowObject[key] = $td.find('select option:selected').text().trim();
                            //  rowObject['TaxCodeval'] = $td.closest('tr').find('.Taxc option:selected').val();
                            //  rowObject['UomEntryVal'] = $td.closest('tr').find('.Uomc1 option:selected').val();
                        } else {
                            rowObject[key] = $td.text().trim();
                        }
                    });

                    $("#WTId").val(rowObject.WTId)
                    loadWithholdingTableData(rowObject.WTId);
                    $("#IsActive").val(rowObject.Active)
                    $("#WTCode").val(rowObject.Code)
                    $("#WTName").val(rowObject.Name)
                    $("#Rate").val(rowObject.Rate)
                    $("#LocId").val(rowObject.Location).trigger("change");
                    $("#Assessee").val(rowObject.Assessee).trigger("change");
                    $("#Category").val(rowObject.Category).trigger("change");
                    $("#BaseType").val(rowObject.BaseType).trigger("change");
                    $("#ReturnType").val(rowObject.ReturnType).trigger("change");
                    $("#Section").val(rowObject.Section).trigger("change");
                    const formattedDate = formatAndSetDate(rowObject.EffectivetDate);
                    $("#EffecDate").val(formattedDate)
                    $("#TDSType").val(rowObject.TDSType).trigger("change");
                    if (rowObject.Active == "Y") {
                        $("#IsActive").prop("checked", true);
                    }
                    if (rowObject.Active == "N") {
                        $("#IsActive").prop("checked", false);
                    }
                    ShowBtn()
                    $("#Create_wtholdingtax_tab").click();
                }
            }
            //Function to handle form reset
            {
                $("#Form_reset_btn").click(function () {
                    $(".WithodlingTax_form").removeClass("is-invalid");
                });
            }
            //Function Btn Opration
            {
                $("#Form_reset_btn").click(function () { HideBtn(); $('#Wholdingtbl tbody').html("") })
                function ShowBtn() {
                    $("#Form_Delete_btn").show();
                    $("#Form_Update_btn").show();
                    $("#Form_Save_btn").hide();
                }
                function HideBtn() {
                    $("#Form_Save_btn").show();
                    $("#Form_Delete_btn").hide();
                    $("#Form_Update_btn").hide();
                }
            }

            //region All functions
            {
                function formatAndSetDate(inputDate) {
                    if (inputDate && typeof inputDate === 'string') {
                        const parts = inputDate.split(' ');
                        const datePart = parts[0];
                        const timePart = parts[1];
                        const [day, month, year] = datePart.split('-');
                        const formattedDate = `${year}-${month}-${day}`;
                        const formattedDateTime = `${formattedDate} ${timePart}`;
                        return formattedDate;
                    } else {
                        // Handle the case where inputDate is undefined, null, or not a string
                        return null; // Or any other appropriate value or action
                    }
                }
                // Function to retrieve menu data
                LoadTableData();
                function LoadTableData() {
                    $.ajax({
                        url: '@Url.Action("GETDATA", "WithHoldingTax")', // Update with your API endpoint for retrieving menu data
                        type: 'GET',
                        dataType: 'json',
                        success: function (response) {
                            ApplyDatatable(response, "Table")
                        },
                        error: function (error) {
                            notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight");
                            console.error('Error:', error.responseText);
                        }
                    });
                }
                //Apply Datatable
                function ApplyDatatable(jsonData, Table_Id) {
                    if ($.fn.DataTable.isDataTable('#' + Table_Id)) {
                        $('#' + Table_Id).DataTable().destroy();
                    }

                    $('#' + Table_Id).DataTable({
                        scrollX: true,
                        scrollY: '600px',
                        scrollCollapse: true,
                        autoWidth: false,
                        fixedHeader: true,
                        data: jsonData,
                        columns: [
                            {
                                data: null,
                                title: "Sr No",
                                className: 'tbl_Sr_no no-wrap text-center',
                                render: function (data, type, row, meta) {
                                    return meta.row + 1;
                                }
                            },
                            {
                                data: null,
                                title: 'Action',
                                className: 'text-center',
                                render: function (data, type, row) {
                                    // Customize the content of the image column
                                    return '<center><i class="fa fa-edit table_edit text-primary mr-1"></i> <i class="fa fa-trash text-danger mr-2  table_delete"></i></center>';
                                }
                            },
                            {
                                data: 'IsActive',
                                title: 'Active',
                                render: function (data, type, row) {
                                    // Customize the content of the image column
                                    if (data == "Y") {
                                        return `<center><label style="margin:0px!important; padding:0px!important;" class="tblswitch p-0 m-0">
                                                                            <input type="checkbox" disabled value="`+ data + `" checked name="IsActive" class="tbltoggleSwitch form-control form-control-sm ">
                                                                    <span class="tblslider"></span>
                                                                    </label></center>`;
                                    } else {
                                        return `<center><label class="tblswitch">
                                                                                <input type="checkbox" disabled value="`+ data + `"  name="IsActive" class="tbltoggleSwitch form-control form-control-sm ">
                                                                        <span class="tblslider"></span>
                                                                    </label></center>`;
                                    }

                                }
                            },
                            { data: 'WTId', title: 'WTId', className: 'tbl_Main_ID d-none' },
                            { data: 'WTCode', title: 'Code', className: 'tbl_WTCode text-center' },
                            {
                                data: 'TDSType',
                                title: 'TDS Type',
                                className: 'no-wrap text-left',

                                render: function (data, type, row) {
                                    // Customize the content of the image column
                                    if (data == "I") {
                                        return `eTDS`;
                                    } else if (data == "L") {
                                        return `GST TDS`;
                                    } 
                                    else {
                                        return `GST TCS</center`;
                                    }
                                }
                            },
                           
                            { data: 'TDSType', title: 'TDS Type', className: 'tbl_TDSType d-none ' },
                            { data: 'WTName', title: 'Name', className: 'tbl_WTName text-left' },
                            { data: 'Section', title: 'Section', className: 'tbl_Section' },
                            { data: 'Assessee', title: 'Assessee', className: 'tbl_Assessee' },
                            {
                                data: 'Category',
                                title: 'Category',
                                render: function (data, type, row) {
                                    // Customize the content of the image column
                                    if (data == "P") {
                                        return `Payment`;
                                    } else {
                                        return `Invoice`;
                                    }

                                }
                            },
                            { data: 'Category', title: 'Category', className: 'tbl_Category d-none' },
                            { data: 'Rate', title: 'Rate', className: 'tbl_Rate text-right' },
                            { data: 'EffecDate', title: 'Effective Date', className: 'tbl_EffecDate' },
                            {
                                data: 'BaseType',
                                title: 'Base Type',
                                render: function (data, type, row) {
                                    // Customize the content of the image column
                                    if (data == "N") {
                                        return `Net`;
                                    } else {
                                        return `Gross`;
                                    }

                                }
                            },
                            { data: 'BaseType', title: 'Base Type', className: 'tbl_BaseType d-none' },
                            { data: 'LocName', title: 'Location', className: 'tbl_LocId' },
                            { data: 'LocId', title: 'Location', className: 'tbl_LocId d-none' },
                            { data: 'ReturnType', title: 'Return Type', className: 'tbl_ReturnType' },
                        ],
                        columnDefs: [
                            {
                                targets: '_all',
                                className: 'dt-no-wrap',
                                createdCell: function (td, cellData, rowData, row, col) {
                                    $(td).css('padding', '5px');
                                    $(td).attr('nowrap', 'nowrap');
                                }
                            }
                        ],
                        ordering: true,
                        paging: true,
                        retrieve: true,
                        searching: true,
                        responsive: true,
                        colReorder: false,
                        orderCellsTop: true,
                    });
                }
                //Delete
                function Delete(ID) {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'This With Holding Tax Is Permanetly Delete Form system..!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Delete',
                        confirmButtonColor: 'red',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                url: '@Url.Action("DELETE", "WithHoldingTax")',
                                type: 'POST',
                                dataType: 'json',
                                data: { Id: ID },
                                success: function (response) {
                                    if (response.success) {
                                        $("#WithodlingTax_Mst_form")[0].reset();
                                        $('#Form_reset_btn').click()
                                        LoadTableData();
                                        HideBtn()
                                        notify(response.message, "", "top", "right", "fa fa-check mr-2", "success", "animated fadeInRight", "animated fadeOutRight")
                                        Swal.fire('Deleted!', 'Your data has been deleted.', 'success');
                                    } else {
                                        notify("Error To Updating Data", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                                    }
                                },
                                error: function (error) {
                                    notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                                    console.error('Error:', error.responseText);
                                }
                            });
                        } else if (result.dismiss === Swal.DismissReason.cancel) {
                            Swal.fire('Cancelled', 'Your action has been cancelled.', 'error');
                        }
                    });

                }
            }
        }
        // Region Navigation
        {
            var $table = $("#Table");
            $table.find("tbody tr:first").addClass("active");
            $(".btn_forward").click(function () {
                var $currentRow = $table.find(".active");
                var $nextRow = $currentRow.next("tr");
                if ($nextRow.length > 0) {
                    $currentRow.removeClass("active");
                    $nextRow.addClass("active");
                    bindrecord($nextRow);
                } else {
                    var $firstRow = $table.find("tbody tr:first");
                    $table.find(".active").removeClass("active");
                    $firstRow.addClass("active");
                    bindrecord($firstRow);

                }
            });
            $(".btn_backward").click(function () {
                var $currentRow = $table.find(".active");
                var $prevRow = $currentRow.prev("tr");
                if ($prevRow.length > 0) {
                    $currentRow.removeClass("active");
                    $prevRow.addClass("active");
                    bindrecord($prevRow);
                } else {
                    var $lastRow = $table.find("tr:last");
                    $table.find(".active").removeClass("active");
                    $lastRow.addClass("active");
                    bindrecord($lastRow);
                }
            });
            $(".btn_first").click(function () {
                var $firstRow = $table.find("tbody tr:first");
                $table.find(".active").removeClass("active");
                $firstRow.addClass("active");
                bindrecord($firstRow);
            });
            $(".btn_last").click(function () {
                var $lastRow = $table.find("tr:last");
                $table.find(".active").removeClass("active");
                $lastRow.addClass("active");
                bindrecord($lastRow);
            });
            $(".btn_reload").click(function () {
                $("#WithodlingTax_Mst_form")[0].reset();
                $("#Form_reset_btn").click();
                HideBtn()
            });
        }
        // //Bulk Post
        // {
        //     var objectsArray = []; // Initialize an empty array to store the parsed data

        //     $('#Import').on('change', function () {
        //         var file = this.files[0];
        //         if (file) {
        //             var reader = new FileReader();
        //             reader.onload = function (e) {
        //                 var data = new Uint8Array(e.target.result);
        //                 var workbook = XLSX.read(data, { type: 'array' });
        //                 var firstSheet = workbook.Sheets[workbook.SheetNames[0]];
        //                 var jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });

        //                 if (jsonData.length > 0) {
        //                     var headers = jsonData[0];
        //                     var rows = jsonData.slice(1);
        //                     objectsArray = rows.map(function (row) {
        //                         var obj = {};
        //                         row.forEach(function (cell, i) {
        //                             obj[headers[i]] = cell;
        //                         });
        //                         return obj;
        //                     });
        //                 }
        //             };
        //             reader.readAsArrayBuffer(file);
        //         }
        //     });

        //     $('#Upload_Xls').on('click', function () {
        //         Loader()

        //         $.ajax({
        //             url: "@Url.Action("POSTDATAExcel", "WithHoldingTax")",
        //             method: "POST",
        //             data: { data: JSON.stringify(objectsArray) },
        //             success: function (response) {
        //                 if (response !== "") {
        //                     var jsondata = JSON.parse(response);
        //                     if (jsondata.length > 0) {
        //                         createExcelFile(jsondata);
        //                     } else {
        //                         Swal.fire("Bulk Post Successfull...!", "", "success")
        //                         LoadTableData();
        //                     }
        //                 }
        //                 Loader()
        //                 $('#Import').val("")
        //             },
        //             error: function (err) {
        //                 console.log(err.responseText)
        //                 Loader()
        //             }
        //         });
        //     });

        //     function createExcelFile(jsonData) {
        //         const worksheet = XLSX.utils.json_to_sheet(jsonData);
        //         // Create a new workbook
        //         const workbook = XLSX.utils.book_new();
        //         XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
        //         // Convert workbook to binary string
        //         const excelBuffer = XLSX.write(workbook, {
        //             bookType: "xlsx",
        //             type: "array"
        //         });
        //         // Create a blob from the binary string
        //         const blob = new Blob([excelBuffer], { type: "application/octet-stream" });
        //         // Create a download link and trigger the download
        //         const link = document.createElement('a');
        //         link.href = URL.createObjectURL(blob);
        //         link.download = 'error_log.xlsx';
        //         link.click();
        //         // Clean up the URL object
        //         URL.revokeObjectURL(link.href);
        //     }
        // }
        // bulk Post
        {
            $('#DownloadTemplete').click(function () {
                var value = 'WHT_mst';
                $.ajax({
                    type: "get",
                    url: "@Url.Action("GetHeader", "UnitMaster")",
                    data: { data: value },
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        var obj = data;
                        var headers = [];

                        // Populate headers array with column names and metadata
                        for (var i = 0; i < obj.length; i++) {
                            var header = obj[i].name;
                            var dp_field_dname = obj[i].name;
                            var MYDATA_TYPE = obj[i].dataType;
                            var MYLength = obj[i].maxLength;
                            var headerText = `${dp_field_dname},(${MYDATA_TYPE}, ${MYLength})`;
                            var tooltipText = '';

                            if (header.includes('TDSType')) {
                                tooltipText = `Tooltip for eTDS=I,GST TDS=L,GST TCS=T fill this Nvarchar(1) Values in ${header}`;
                            }


                            if (header.includes('Section')) {
                                tooltipText = `Tooltip Use following Values to fill Section Dropdown 
value="192B"=>192B,
value="193"=>193,                                           
value="194"=>194,                                            
value="194A"=>194A,
value="194B"=>194B,
value="194C"=>194C,
value="194D"=>194D,
value="194F"=>194F,
value="194G"=>194G,
value="194H"=>194H,
value="194I"=>194I,
value="194J"=>194J,
value="206C"=>206C`;

                            }

                            if (header.includes('BaseType')) {
                                tooltipText = `Tooltip Use following Values to fill BaseType Dropdown
                                         value="G"=>GROSS,
                                        value="N"=>NET`;
                            }

                            if (header.includes('ReturnType')) {
                                tooltipText = `Tooltip Use following Values to fill ReturnType Dropdown
                                             value="27"=>27,
                                            value="26"=>26`;
                            }

                            if (header.includes('Category')) {
                                tooltipText = `Tooltip Use following Values to fill Category Dropdown
                                                     value="P"=>Payment,
                                                    value="I"=>Invoice`;
                            }

                            if (header.includes('Assessee')) {
                                tooltipText = `Tooltip Use following Values to fill Assessee Dropdown
                                            value="COM"=>COM,
                                            value="HUF"=>HUF,
                                            value="IND"=>IND`;
                            }
                            if (header.includes('LocId')) {
                                tooltipText = `Tooltip Use following Values to fill Location Dropdown Use Location Data sheet to Fill Proper Data `;
                                               
                            }
                            var headerObj = {
                                text: headerText,
                                tooltip: tooltipText
                            };

                            headers.push(headerObj);
                        }

                        const worksheetData = [headers.map(header => header.text)];
                        const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);
                        const columnWidth = 30; // Set desired width (in characters)
                        worksheet['!cols'] = headers.map(() => ({ width: columnWidth }));

                        
                        headers.forEach((header, index) => {
                            if (header.tooltip) {
                                const cellAddress = XLSX.utils.encode_cell({ r: 0, c: index });
                                worksheet[cellAddress].c = [{
                                    t: header.tooltip,
                                    a: "system"
                                }];
                            }
                        });
                       

                        const workbook = XLSX.utils.book_new();
                        XLSX.utils.book_append_sheet(workbook, worksheet, 'Headers');

                        
                        $.ajax({
                            type: "get",
                            url: "@Url.Action("GET", "LocationMaster")",
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                var obj = data;
                                if (obj.length > 0) {
                                    var columnNames = Object.keys(obj[0]);
                                    var sheetData = [columnNames];
                                    for (var i = 0; i < obj.length; i++) {
                                        var row = [];
                                        for (var j = 0; j < columnNames.length; j++) {
                                            row.push(obj[i][columnNames[j]]);
                                        }
                                        sheetData.push(row);
                                    }

                                    const worksheet2 = XLSX.utils.aoa_to_sheet(sheetData);
                                    worksheet2['!cols'] = columnNames.map(() => ({ width: columnWidth }));
                                    XLSX.utils.book_append_sheet(workbook, worksheet2, ' Location Data');
                                }
                                const excelBuffer = XLSX.write(workbook, {
                                    bookType: 'xlsx',
                                    type: 'array'
                                });
                                const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });
                                const link = document.createElement('a');
                                link.href = URL.createObjectURL(blob);
                                link.download = `${value}.xlsx`; // Corrected filename format
                                link.click();
                                URL.revokeObjectURL(link.href);
                            },
                            error: function (error) {
                                console.error('Error fetching EWB data:', error);
                            }
                        });
                       

                        const excelBuffer = XLSX.write(workbook, {
                            bookType: 'xlsx',
                            type: 'array'
                        });
                        const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });
                        const link = document.createElement('a');
                        link.href = URL.createObjectURL(blob);
                        link.download = `${value}.xlsx`; // Corrected filename format
                        link.click();
                        URL.revokeObjectURL(link.href);

                    },
                    error: function (error) {
                        console.error('Error fetching data:', error);
                    }
                });
            });

            $('#Upload_Xls').on('click', function () {
                Loader();

                var input = document.getElementById('Import');
                var file = input.files[0];
                var reader = new FileReader();

                reader.onload = function (e) {
                    var data = new Uint8Array(e.target.result);
                    let workbook = XLSX.read(data, { type: 'array' });
                    let firstSheetName = workbook.SheetNames[0];
                    let worksheet = workbook.Sheets[firstSheetName];
                    let excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                    let Eheaders = excelData[0];
                    let headers = Eheaders.map(header => {
                        // Split the header on ',' and take the first part
                        return header.split(',')[0];
                    });
                    let rows = excelData.slice(1);
                    let dataArray = rows.map(row => {
                        let obj = {};
                        row.forEach((cell, i) => {
                            obj[headers[i]] = cell;
                        });
                        return obj;
                    });
                    $.ajax({
                        url: "@Url.Action("POSTDATAExcel", "WithHoldingTax")",
                        method: "POST",
                        data: { data: JSON.stringify(dataArray) },
                        success: function (response) {
                            if (response !== "") {
                                var jsondata = JSON.parse(response);
                                if (jsondata.length > 0) {
                                    createExcelFile(jsondata);
                                } else {
                                    Swal.fire("Bulk Post Successful...!", "", "success");
                                    LoadTableData();
                                }
                            }
                            Loader();
                            $('#Import').val("");
                        },
                        error: function (err) {
                            console.log(err.responseText);
                            Loader();
                        }
                    });
                };

                reader.readAsArrayBuffer(file);
            });

            function createExcelFile(jsonData) {
                const worksheet = XLSX.utils.json_to_sheet(jsonData);
                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
                const excelBuffer = XLSX.write(workbook, {
                    bookType: "xlsx",
                    type: "array"
                });
                const blob = new Blob([excelBuffer], { type: "application/octet-stream" });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'error_log.xlsx';
                link.click();
                URL.revokeObjectURL(link.href);
            }
        }
        // View excl sheet
        {
            $('.closeModalInstallments').click(function () {
                $('#excelModal').modal('hide');
                $('#CopyFromModal').modal('hide');
            });

            document.getElementById('ViewExcel').addEventListener('click', function () {
                let fileInput = document.getElementById('Import');
                let file = fileInput.files[0];
                let fileName = file.name;
                let baseName = fileName.split('.').slice(0, -1).join('.');
                let reader = new FileReader();

                reader.onload = function (e) {
                    let data = new Uint8Array(e.target.result);
                    let workbook = XLSX.read(data, { type: 'array' });
                    let firstSheetName = workbook.SheetNames[0];
                    let worksheet = workbook.Sheets[firstSheetName];

                    let excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                    let Eheaders = excelData[0];
                    let headers = Eheaders.map(header => header.split(',')[0]);

                    let rows = excelData.slice(1);
                    let dataArray = rows.map(row => {
                        let obj = {};
                        row.forEach((cell, i) => {
                            obj[headers[i]] = cell;
                        });
                        return obj;
                    });

                    let table = document.getElementById('excelTable');
                    table.innerHTML = '';

                    let thead = document.createElement('thead');
                    let tr = document.createElement('tr');
                    headers.forEach(header => {
                        let th = document.createElement('th');
                        th.textContent = header;
                        tr.appendChild(th);
                    });
                    thead.appendChild(tr);
                    table.appendChild(thead);

                    let tbody = document.createElement('tbody');
                    dataArray.forEach(row => {
                        let tr = document.createElement('tr');
                        headers.forEach(header => {
                            let td = document.createElement('td');
                            td.textContent = row[header];
                            tr.appendChild(td);
                        });
                        tbody.appendChild(tr);
                    });
                    table.appendChild(tbody);

                    $('#excelTable').DataTable({
                        ordering: true,
                        paging: true,
                        retrieve: true,
                        searching: false,
                        responsive: true,
                        colReorder: false,
                        orderCellsTop: false,
                        scrollY: '300px', // Set the height for the scroll
                        scrollX: true, // Enable horizontal scrolling if needed
                        scrollCollapse: true, // Enable collapse of the scroll area
                        paging: true, // Enable pagination
                        fixedHeader: true // Keep the header fixed
                    });
                    $('#excelModal').modal('show');
                };

                reader.readAsArrayBuffer(file);
            });



        }
     });
</script>