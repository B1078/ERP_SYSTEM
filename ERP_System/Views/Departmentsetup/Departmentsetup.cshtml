@{
    string? UserName = ViewContext.HttpContext.Session.GetString("UserName");
    DateTime currentDate = DateTime.Now;
    string formattedDate = currentDate.ToString("dd-MM-yyyy");
}
<div class="col-xl-12 col-md-12">
    <div class="card table-card p-2 mb-0">
        <div class="row">
            <div class="col-md-12">
                <button class="btn text-center btn-sm btn-primary btn_first p-2" title="Get First Document" style="width:50px; font-size:18px;">
                    <i class="fa fa-arrow-circle-o-left"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary btn_backward p-2" title="Get Privious Record" style="width:50px; font-size:18px;">
                    <i class="fas fa-long-arrow-alt-left"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary p-2 btn_forward" title="Get Next Record" style="width:50px; font-size:18px;">
                    <i class="fas fa-long-arrow-alt-right"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary btn_last p-2" title="Get Last Document" style="width:50px; font-size:18px;">
                    <i class="fa fa-arrow-circle-o-right"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary btn_reload p-2" title="Reload" style="width:50px; font-size:18px;">
                    <i class="fa fa-refresh"></i>
                </button>
                <button class="btn text-center btn-sm btn-primary p-2 " id="XLS" title="Export" style="width:50px; font-size:18px;">
                    <i class="fa fa-arrow-circle-o-up"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="card table-card mt-2">
        <div class="card-header">
            <h5 class="webtitle">Department  Setup </h5>
            <div class="card-header-right">
                <ul class="list-unstyled card-option">
                    <li><i class="fa fa fa-wrench open-card-option"></i></li>
                    <li><i class="fa fa-window-maximize full-card"></i></li>
                    <li><i class="fa fa-minus minimize-card"></i></li>
                    <li><i class="fa fa-refresh reload-card"></i></li>
                    <li hidden><i class="fa fa-trash close-card"></i></li>
                </ul>
            </div>
        </div>
        <div class="card-block shadow">
            <!-- Row start -->
            <div class="row p-2">
                <div class="col-lg-12 col-xl-12 ">
                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs  tabs" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" data-toggle="tab" id="Create_Departmentsetup_tab" href="#Create_Departmentsetup" role="tab">Department  Setup </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#All_Departmentsetup" role="tab">All Department Setups </a>
                        </li>
                    </ul>
                    <!-- Tab panes -->
                    <div class="tab-content tabs card-block">
                        <div class="tab-pane active p-0 m-0 mt-2" id="Create_Departmentsetup" role="tabpanel">
                            <form id="Departmentsetup_form" class="w-100 mt-4 p-4 border">
                                <div class="row justify-content-start mt-1 mb-3 p-1">
                                    <div class="col-md-6 col-lg-6">
                                        <label class="switch">
                                            <input type="checkbox" value="Y" checked name="IsActive" id="IsActive" class="toggleSwitch form-control form-control-sm">
                                            <span class="slider"></span>
                                        </label>
                                    </div>
                                    <div class="col-md-6 col-lg-6">
                                        <div class="row align-items-center">
                                            <div class="col-md-3"></div>
                                            <div class="col-md-3">
                                                <button type="button" id="DownloadTemplete" class="btn btn-sm btn-primary w-100">
                                                    Download Template
                                                </button>
                                            </div>
                                            <div class="col-md-3">
                                                <input class='p-1 form-control form-control-sm selectfile' id="Import" type='file' placeholder='Choose File' />
                                            </div>
                                            <div class="col-md-3 d-flex justify-content-end">
                                                <button type="button" id="Upload_Xls" class="btn btn-sm btn-success w-100">Upload</button>
                                                <button type="button" class="btn btn-sm btn-primary" id="ViewExcel"><i class="fa fa-eye"></i></button>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <hr>
                                <div class="row">
                                    <div class="col-md-3 mt-1 mb-1">
                                        <input name="DeptId" id="DeptId" type="text" hidden oninput="MaxLengthInp(this,100)" placeholder="Department Name" class="form-control form-control-sm Departmentsetup_inp" />

                                        <label for="DeptName"> Department Name</label>
                                        <input name="DeptName" id="DeptName" type="text" oninput="MaxLengthInp(this,100)" placeholder="Department Name" class="form-control form-control-sm Departmentsetup_inp" />
                                    </div>

                                    <div class="col-md-3 mt-1 mb-1">
                                        <label for="DeptDesc">Description</label>
                                        <input name="DeptDesc" id="DeptDesc" type="text" oninput="MaxLengthInp(this,200)" placeholder="Description" class="form-control form-control-sm Departmentsetup_inp" />
                                    </div>


                                </div>
                                <div class="row mt-2 mb-2">
                                    <div class="col-md-3 mt-1 mb-1 d-none ">
                                        <label for="UpdateDate">Updated On</label>
                                        <input readonly name="UpdateDate" id="UpdateDate" value="@formattedDate" type="text" placeholder="dd/mm/yy" class="form-control form-control-sm  Departmentsetup_inp" />
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1 d-none ">
                                        <label for="UpdatedBy">Updated By</label>
                                        <input readonly name="UpdatedBy" id="UpdatedBy" value="@UserName" type="text" placeholder="Updated By" class="form-control form-control-sm  Departmentsetup_inp" />
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1 d-none">
                                        <label for="CreateDate">Created On</label>
                                        <input readonly name="CreateDate" id="CreateDate" value="@formattedDate" type="text" placeholder="dd/mm/yy" class="form-control form-control-sm  Departmentsetup_inp" />
                                    </div>
                                    <div class="col-md-3 mt-1 mb-1 d-none">
                                        <label for="CreatedBy">Created By</label>
                                        <input readonly name="CreatedBy" id="CreatedBy" value="@UserName" type="text" placeholder="Created By" class="form-control form-control-sm  Departmentsetup_inp" />
                                    </div>
                                </div>
                                <!-- Buttons -->
                                <div class="row mt-4 mb-2">
                                    <div class="col-md-12 mt-3">
                                        <button type="button" id="Form_Delete_btn" style="display:none; width:80px;" class="btn ml-1 mr-1 btn-sm btn-danger">Delete</button>
                                        <button type="button" id="Form_Update_btn" style="display:none; width:80px;" class="btn ml-1 mr-1 btn-sm text-white btn-info">Update</button>
                                        <button type="button" id="Form_Save_btn" style="width:80px;" class="btn ml-1 mr-1 btn-sm btn-success">Save</button>
                                        <button type="reset" id="Form_reset_btn" style="width:80px;" class="btn ml-1 mr-1 btn-sm btn-dark">Reset</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="tab-pane p-3" id="All_Departmentsetup" role="tabpanel">
                            <div class="row p-3  mt-2 border">
                                <div class="table-responsive">
                                    <table class="table table-bordered table-striped   table-hover table-bordered w-100" id="Table">
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Row end -->
        </div>
    </div>
</div>

<div class="modal" id="excelModal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Excel Sheet data</h5>
            <span class="close closeModalInstallments" data-bs-dismiss="modal" id="">&times;</span>
        </div>
        <div class="modal-body">
            <div class="card-body border">
                <div class="table-responsive" style="height:500px;">
                    <table class="table table-bordered table-striped table-hover w-100" cellspacing="0" cellpadding="0" border="1" id="excelTable">
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
      $(document).ready(function () {
          function Loader() {
              $(".Loader1").toggleClass('d-none');
          }
    // import excel
          {
              $("#XLS").click(function (event) {
                  event.preventDefault(); // Prevent the default behavior
                  var table = $("#Table")[0];
                  if (!table) {
                      console.error("Table not found");
                      return;
                  }
                  var columnsToExport = [
                      { index: 0, name: 'Sr No' },
                      { index: 3, name: 'DeptId'},
                      { index: 4, name: 'Department Name' },
                      { index: 5, name: 'Description' }

                  ];
                  var filteredData = [];
                  var columnNamesRow = [];
                  columnsToExport.forEach(function (column) {
                      columnNamesRow.push(column.name);
                  });
                  filteredData.push(columnNamesRow);
                  $(table).find('tbody tr').each(function (rowIndex, row) {
                      var rowData = [];
                      $(row).find('td').each(function (cellIndex, cell) {
                          columnsToExport.forEach(function (column) {
                              if (cellIndex === column.index) {
                                  rowData.push(cell.textContent);
                              }
                          });
                      });
                      filteredData.push(rowData);
                  });
                  var ws = XLSX.utils.aoa_to_sheet(filteredData);
                  var wb = XLSX.utils.book_new();
                  XLSX.utils.book_append_sheet(wb, ws, "Sheet JS");
                  XLSX.writeFile(wb, 'Project-Config.xlsx');
              });
          }
          //Region Add
          {
              $("#Form_Save_btn").click(function () {
                  let isValid = true;
                  let formData = {};
                  $("#Departmentsetup_form input,select,textarea").each(function () {
                      var inputName = $(this).attr('name');
                      var inputValue = "";
                      if ($(this).find('textarea').lenght) {
                          inputValue = $(this).text();
                      } else {
                          inputValue = $(this).val();
                      }
                      var mandatoryfields = ["DeptName", "DeptDesc"];
                      var inputElement = $("#" + inputName);
                      var inputId = inputElement.attr('id');
                      var labelText = $("label[for='" + inputId + "']").text();
                      if (mandatoryfields.includes(inputName) && inputValue === "") {
                          if (inputElement.hasClass("select2-hidden-accessible")) {
                              inputElement.next('.select2-container').addClass("select2-error");
                          } else {
                              inputElement.addClass("border-danger");
                          }
                          isValid = false;
                          notify("Please Fill " + labelText + " Details..!", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                          return false;
                      } else {
                          if (inputElement.hasClass("select2-hidden-accessible")) {
                              inputElement.next('.select2-container').removeClass("select2-error");
                          } else {
                              inputElement.removeClass("border-danger");
                          }
                      }
                      if (inputName !== undefined && inputName !== "" && inputName !== null) {
                          if (inputName == "FileName") {

                              formData[inputName] = fileObject.FileName;
                          } else {

                              formData[inputName] = inputValue;
                          }
                      }
                  });


                  //Call Api
                  if (isValid && formData != "") {
                      $.ajax({
                          url: '@Url.Action("POSTDATA", "Departmentsetup")',
                          type: 'POST',
                          dataType: 'json',
                          data: formData,
                          success: function (response) {
                              if (response !== "") {
                                  notify(response.message, "", "top", "right", "fa fa-check mr-2", "success", "animated fadeInRight", "animated fadeOutRight")
                                  $("#Departmentsetup_form")[0].reset();
                                  LoadTableData();
                              }
                          },
                          error: function (error) {
                              notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                              console.error('Error:', error.responseText);
                          }
                      });
                  }
              })
          }
          //Region Update
          {
              $("#Form_Update_btn").click(function () {
                  let isValid = true;
                  let formData = {};
                  $("#Departmentsetup_form input,select,textarea").each(function () {
                      var inputName = $(this).attr('name');
                      var inputValue = "";
                      if ($(this).find('textarea').lenght) {
                          inputValue = $(this).text();
                      } else {
                          inputValue = $(this).val();
                      }
                      var mandatoryfields = ["DeptName", "DeptDesc", "DeptId"];
                      var inputElement = $("#" + inputName);
                      var inputId = inputElement.attr('id');
                      var labelText = $("label[for='" + inputId + "']").text();
                      if (mandatoryfields.includes(inputName) && inputValue === "") {
                          if (inputElement.hasClass("select2-hidden-accessible")) {
                              inputElement.next('.select2-container').addClass("select2-error");
                          } else {
                              inputElement.addClass("border-danger");
                          }
                          isValid = false;
                          notify("Please Fill " + labelText + " Details..!", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                          return false;
                      } else {
                          if (inputElement.hasClass("select2-hidden-accessible")) {
                              inputElement.next('.select2-container').removeClass("select2-error");
                          } else {
                              inputElement.removeClass("border-danger");
                          }
                      }
                      if (inputName !== undefined && inputName !== "" && inputName !== null) {

                          if (inputName == "FileName") {
                              formData[inputName] = fileObject.FileName;
                          } else {
                              formData[inputName] = inputValue;
                          }

                      }
                  });
                  //Call Api
                  if (isValid && formData !== "") {
                      $.ajax({
                          url: '@Url.Action("UPDATEDATA", "Departmentsetup")',
                          type: 'POST',
                          dataType: 'json',
                          data: formData,
                          success: function (response) {
                              if (response.success) {
                                  $("#Departmentsetup_form")[0].reset();
                                  LoadTableData();
                                  HideBtn()
                                  notify(response.message, "", "top", "right", "fa fa-check mr-2", "success", "animated fadeInRight", "animated fadeOutRight")
                              } else {
                                  notify("Error To Updating Data", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                              }
                          },
                          error: function (error) {
                              notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                              console.error('Error:', error.responseText);
                          }
                      });
                  }
              })
          }
          //Region Delete
          {
              $("#Form_Delete_btn").click(function () {
                  Delete($("#DeptId").val());
              })
              $(document).on("click", ".table_delete", function () {
                  var $row = $(this).closest("tr");
                  var id = $row.find('td.tbl_Main_ID').text();
                  Delete(id);
              })
          }
          //Region Select Row Data
          {
              $(document).on("click", ".table_edit", function () {
                  var $row = $(this).closest("tr");
                  $row.addClass("active");
                  bindrecord($row);
              })
              function bindrecord($row) {
                  var rowObject = {};
                  $row.find('td').each(function (index) {
                      var $td = $(this);
                      var key = $td.closest('table').find('th').eq(index).text().trim().replace(/[.,()%\- ]/g, '');
                      if ($td.find('input').length) {
                          rowObject[key] = $td.find('input').val();
                      }
                      else if ($td.find('textarea').length) {
                          rowObject[key] = $td.find('textarea').val();
                      }
                      else if ($td.find('img').length) {
                          rowObject[key] = $td.find('img').attr("src");
                      } else if ($td.find('select').length) {
                          //  rowObject[key] = $td.find('select option:selected').text().trim();
                          //  rowObject['TaxCodeval'] = $td.closest('tr').find('.Taxc option:selected').val();
                          //  rowObject['UomEntryVal'] = $td.closest('tr').find('.Uomc1 option:selected').val();
                      } else {
                          rowObject[key] = $td.text().trim();
                      }
                  });
                  $("#DeptId").val(rowObject.DeptId)
                  $("#DeptName").val(rowObject.DepartmentName)
                  $("#DeptDesc").val(rowObject.Description)
                  $("#CreatedBy").val(rowObject.CreatedBy)
                  $("#UpdatedBy").val(rowObject.UpdatedBy)
                  $("#UpdateDate").val(UpdateDate)
                  $("#CreateDate").val(CreateDate)
                  $("#IsActive").val(rowObject.Active)
                  if (rowObject.Active == "Y") {
                      $("#IsActive").prop("checked", true);
                  }
                  if (rowObject.Active == "N") {
                      $("#IsActive").prop("checked", false);
                  }
                  ShowBtn()
                  $("#Create_Departmentsetup_tab").click();
              }
          }
          //Function to handle form reset
          {
              $("#Form_reset_btn").click(function () {
                  $(".Form_Elem").removeClass("is-invalid");
              });
          }
          //Function Btn Opration
          {
              $("#Form_reset_btn").click(function () { HideBtn() })
              function ShowBtn() {
                  $("#Form_Delete_btn").show();
                  $("#Form_Update_btn").show();
                  $("#Form_Save_btn").hide();
              }
              function HideBtn() {
                  $("#Form_Save_btn").show();
                  $("#Form_Delete_btn").hide();
                  $("#Form_Update_btn").hide();
              }
          }
          //region All functions
          {
              // Function to retrieve menu data
              LoadTableData();
              function LoadTableData() {
                  $.ajax({
                      url: '@Url.Action("GETDATA", "Departmentsetup")', // Update with your API endpoint for retrieving menu data
                      type: 'GET',
                      dataType: 'json',
                      success: function (response) {
                          ApplyDatatable(response, "Table")
                      },
                      error: function (error) {
                          notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight");
                          console.error('Error:', error.responseText);
                      }
                  });
              }


          }
          //Apply Datatable
        //Apply Datatable
        function ApplyDatatable(jsonData, Table_Id) {
            if ($.fn.DataTable.isDataTable('#' + Table_Id)) {
                $('#' + Table_Id).DataTable().destroy();
            }

            $('#' + Table_Id).DataTable({
                scrollX: true,
                scrollY: '600px',
                scrollCollapse: true,
                autoWidth: false,
                fixedHeader: true,
                data: jsonData,
                columns: [
                    {
                        data: null,
                        title: "Sr No",
                        className: 'tbl_Sr_no no-wrap text-center',
                        render: function (data, type, row, meta) {
                            return meta.row + 1;
                        }
                    },
                      {
                          data: null,
                          title: 'Action',
                          className: 'text-center',
                          render: function (data, type, row) {
                              // Customize the content of the image column
                              return '<i class="fa fa-edit table_edit text-primary mr-1"></i> <i class="fa fa-trash text-danger table_delete  mr-2"></i>';
                          }
                      },
                      {
                          data: 'IsActive',
                          title: 'Active',
                          className: 'text-center',
                          render: function (data, type, row) {
                              // Customize the content of the image column
                              if (data == "Y") {
                                  return `<center><label style="margin:0px!important; padding:0px!important;" class="tblswitch p-0 m-0">
                                                                                                              <input type="checkbox" disabled value="`+ data + `" checked name="IsActive" class="tbltoggleSwitch form-control form-control-sm ">
                                                                                                      <span class="tblslider"></span>
                                                                                                      </label></center>`;
                              } else {
                                  return `<center><label class="tblswitch">
                                                                                                                  <input type="checkbox" disabled value="`+ data + `"  name="IsActive" class="tbltoggleSwitch form-control form-control-sm ">
                                                                                                          <span class="tblslider"></span>
                                                                                                      </label></center>`;
                              }

                          }
                      },
                      { data: 'DeptId', title: 'DeptId', className: 'tbl_StateId d-none tbl_Main_ID' },
                      { data: 'DeptName', title: 'Department Name', className: 'tbl_DeptName text-left' },
                      { data: 'DeptDesc', title: 'Description', className: 'tbl_DeptDesc text-left' },
                      { data: 'CreatedBy', title: 'Created By', className: 'tbl_CreatedBy d-none' },
                      { data: 'CreateDate', title: 'Create Date', className: 'tbl_CreateDate d-none' },
                      { data: 'UpdatedBy', title: 'Updated By', className: 'tbl_UpdatedBy d-none' },
                      { data: 'UpdateDate', title: 'Update Date', className: 'tbl_UpdateDate d-none' },
                      // Add more columns as needed
                  ],
                columnDefs: [
                    {
                        targets: '_all',
                        className: 'dt-no-wrap',
                        createdCell: function (td, cellData, rowData, row, col) {
                            $(td).css('padding', '5px');
                            $(td).attr('nowrap', 'nowrap');
                        }
                    }
                ],
                ordering: true,
                paging: true,
                retrieve: true,
                searching: true,
                responsive: true,
                colReorder: false,
                orderCellsTop: true,
            });
        }
          //Delete
          function Delete(ID) {
              Swal.fire({
                  title: 'Are you sure?',
                  text: 'This Department setup Is Permanetly Delete Form system..!',
                  icon: 'warning',
                  showCancelButton: true,
                  confirmButtonText: 'Delete',
                  confirmButtonColor: 'red',
                  cancelButtonText: 'Cancel'
              }).then((result) => {
                  if (result.isConfirmed) {
                      $.ajax({
                          url: '@Url.Action("DELETE", "Departmentsetup")',
                          type: 'POST',
                          dataType: 'json',
                          data: { Id: ID },
                          success: function (response) {
                              if (response.success) {
                                  $("#Departmentsetup_form")[0].reset();
                                  LoadTableData();
                                  HideBtn()
                                  notify(response.message, "", "top", "right", "fa fa-check mr-2", "success", "animated fadeInRight", "animated fadeOutRight")
                                  Swal.fire('Deleted!', 'Your data has been deleted.', 'success');
                              } else {
                                  notify("Error To Updating Data", "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                              }
                          },
                          error: function (error) {
                              notify(error.responseText, "", "top", "right", "fa fa-warning mr-2", "danger", "animated fadeInRight", "animated fadeOutRight")
                              console.error('Error:', error.responseText);
                          }
                      });
                  } else if (result.dismiss === Swal.DismissReason.cancel) {
                      Swal.fire('Cancelled', 'Your action has been cancelled.', 'error');
                  }
              });

          }
          // Region Navigation
          {
              var $table = $("#Table");
              $table.find("tbody tr:first").addClass("active");
              $(".btn_forward").click(function () {
                  var $currentRow = $table.find(".active");
                  var $nextRow = $currentRow.next("tr");
                  if ($nextRow.length > 0) {
                      $currentRow.removeClass("active");
                      $nextRow.addClass("active");
                      bindrecord($nextRow);
                  } else {
                      var $firstRow = $table.find("tbody tr:first");
                      $table.find(".active").removeClass("active");
                      $firstRow.addClass("active");
                      bindrecord($firstRow);
                  }
              });
              $(".btn_backward").click(function () {
                  var $currentRow = $table.find(".active");
                  var $prevRow = $currentRow.prev("tr");
                  if ($prevRow.length > 0) {
                      $currentRow.removeClass("active");
                      $prevRow.addClass("active");
                      bindrecord($prevRow);
                  } else {
                      var $lastRow = $table.find("tr:last");
                      $table.find(".active").removeClass("active");
                      $lastRow.addClass("active");
                      bindrecord($lastRow);
                  }
              });
              $(".btn_first").click(function () {
                  var $firstRow = $table.find("tbody tr:first");
                  $table.find(".active").removeClass("active");
                  $firstRow.addClass("active");
                  bindrecord($firstRow);
              });
              $(".btn_last").click(function () {
                  var $lastRow = $table.find("tr:last");
                  $table.find(".active").removeClass("active");
                  $lastRow.addClass("active");
                  bindrecord($lastRow);
              });
              $(".btn_reload").click(function () {
                  $("#Departmentsetup_form")[0].reset();
                  $("#Form_reset_btn").click();
                  HideBtn()
              });
          }
          // //Bulk Post
          // {
          //     var objectsArray = []; // Initialize an empty array to store the parsed data

          //     $('#Import').on('change', function () {
          //         var file = this.files[0];
          //         if (file) {
          //             var reader = new FileReader();
          //             reader.onload = function (e) {
          //                 var data = new Uint8Array(e.target.result);
          //                 var workbook = XLSX.read(data, { type: 'array' });
          //                 var firstSheet = workbook.Sheets[workbook.SheetNames[0]];
          //                 var jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });

          //                 if (jsonData.length > 0) {
          //                     var headers = jsonData[0];
          //                     var rows = jsonData.slice(1);
          //                     objectsArray = rows.map(function (row) {
          //                         var obj = {};
          //                         row.forEach(function (cell, i) {
          //                             obj[headers[i]] = cell;
          //                         });
          //                         return obj;
          //                     });
          //                 }
          //             };
          //             reader.readAsArrayBuffer(file);
          //         }
          //     });

          //     $('#Upload_Xls').on('click', function () {
          //         Loader()

          //         $.ajax({
          //             url: "@Url.Action("POSTDATAExcel","Departmentsetup")",
          //             method: "POST",
          //             data: { data: JSON.stringify(objectsArray) },
          //             success: function (response) {
          //                 if (response !== "") {
          //                     var jsondata = JSON.parse(response);
          //                     if (jsondata.length > 0) {
          //                         createExcelFile(jsondata);
          //                     } else {
          //                         Swal.fire("Bulk Post Successfull...!", "", "success")
          //                         LoadTableData();
          //                     }
          //                 }
          //                 Loader()
          //                 $('#Import').val("")
          //             },
          //             error: function (err) {
          //                 console.log(err.responseText)
          //                 Loader()
          //             }
          //         });
          //     });

          //     function createExcelFile(jsonData) {
          //         const worksheet = XLSX.utils.json_to_sheet(jsonData);
          //         // Create a new workbook
          //         const workbook = XLSX.utils.book_new();
          //         XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
          //         // Convert workbook to binary string
          //         const excelBuffer = XLSX.write(workbook, {
          //             bookType: "xlsx",
          //             type: "array"
          //         });
          //         // Create a blob from the binary string
          //         const blob = new Blob([excelBuffer], { type: "application/octet-stream" });
          //         // Create a download link and trigger the download
          //         const link = document.createElement('a');
          //         link.href = URL.createObjectURL(blob);
          //         link.download = 'error_log.xlsx';
          //         link.click();
          //         // Clean up the URL object
          //         URL.revokeObjectURL(link.href);
          //     }
          // }

        // bulk Post
        {
            $('#DownloadTemplete').click(function () {
                var value = 'Dept_Mst';
                $.ajax({
                    type: "get",
                    url: "@Url.Action("GetHeader", "UnitMaster")",
                    data: { data: value },
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        var obj = data;
                        var headers = [];

                        // Populate headers array with column names and metadata
                        for (var i = 0; i < obj.length; i++) {
                            var header = obj[i].name;
                            var dp_field_dname = obj[i].name;
                            var MYDATA_TYPE = obj[i].dataType;
                            var MYLength = obj[i].maxLength;
                            var headerText = `${dp_field_dname},(${MYDATA_TYPE}, ${MYLength})`;
                            var tooltipText = '';
                            if (header.toLowerCase().includes('ewbunit')) {
                                tooltipText = "Tooltip for " + header;
                            }
                            if (header.toLowerCase().includes('volumeuom')) {
                                tooltipText = "Tooltip for " + header;
                            }
                            var headerObj = {
                                text: headerText,
                                tooltip: tooltipText
                            };

                            headers.push(headerObj);
                        }
                        const worksheetData = [headers.map(header => header.text)];
                        const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);
                        const columnWidth = 30; // Set desired width (in characters)
                        worksheet['!cols'] = headers.map(() => ({ width: columnWidth }));

                        /*
                        headers.forEach((header, index) => {
                            if (header.tooltip) {
                                const cellAddress = XLSX.utils.encode_cell({ r: 0, c: index });
                                worksheet[cellAddress].c = [{
                                    t: header.tooltip,
                                    a: "system"
                                }];
                            }
                        });
                        */

                        const workbook = XLSX.utils.book_new();
                        XLSX.utils.book_append_sheet(workbook, worksheet, 'Headers');

                        /*
                        $.ajax({
                            type: "get",
                           url: "@Url.Action("GetHeader", "UnitMaster")",
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                var obj = data;
                                if (obj.length > 0) {
                                    var columnNames = Object.keys(obj[0]);
                                    var sheetData = [columnNames];
                                    for (var i = 0; i < obj.length; i++) {
                                        var row = [];
                                        for (var j = 0; j < columnNames.length; j++) {
                                            row.push(obj[i][columnNames[j]]);
                                        }
                                        sheetData.push(row);
                                    }

                                    const worksheet2 = XLSX.utils.aoa_to_sheet(sheetData);
                                    worksheet2['!cols'] = columnNames.map(() => ({ width: columnWidth }));
                                    XLSX.utils.book_append_sheet(workbook, worksheet2, 'EWB Data');
                                }
                                const excelBuffer = XLSX.write(workbook, {
                                    bookType: 'xlsx',
                                    type: 'array'
                                });
                                const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });
                                const link = document.createElement('a');
                                link.href = URL.createObjectURL(blob);
                                link.download = `${value}.xlsx`; // Corrected filename format
                                link.click();
                                URL.revokeObjectURL(link.href);
                            },
                            error: function (error) {
                                console.error('Error fetching EWB data:', error);
                            }
                        });
                        */

                        const excelBuffer = XLSX.write(workbook, {
                            bookType: 'xlsx',
                            type: 'array'
                        });
                        const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });
                        const link = document.createElement('a');
                        link.href = URL.createObjectURL(blob);
                        link.download = `${value}.xlsx`; // Corrected filename format
                        link.click();
                        URL.revokeObjectURL(link.href);

                    },
                    error: function (error) {
                        console.error('Error fetching data:', error);
                    }
                });
            });

            $('#Upload_Xls').on('click', function () {
                Loader();

                var input = document.getElementById('Import');
                var file = input.files[0];
                var reader = new FileReader();

                reader.onload = function (e) {
                    var data = new Uint8Array(e.target.result);
                    let workbook = XLSX.read(data, { type: 'array' });
                    let firstSheetName = workbook.SheetNames[0];
                    let worksheet = workbook.Sheets[firstSheetName];
                    let excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                    let Eheaders = excelData[0];
                    let headers = Eheaders.map(header => {
                        // Split the header on ',' and take the first part
                        return header.split(',')[0];
                    });
                    let rows = excelData.slice(1);
                    let dataArray = rows.map(row => {
                        let obj = {};
                        row.forEach((cell, i) => {
                            obj[headers[i]] = cell;
                        });
                        return obj;
                    });
                    $.ajax({
                        url: "@Url.Action("POSTDATAExcel", "Departmentsetup")",
                        method: "POST",
                        data: { data: JSON.stringify(dataArray) },
                        success: function (response) {
                            if (response !== "") {
                                var jsondata = JSON.parse(response);
                                if (jsondata.length > 0) {
                                    createExcelFile(jsondata);
                                } else {
                                    Swal.fire("Bulk Post Successful...!", "", "success");
                                    LoadTableData();
                                }
                            }
                            Loader();
                            $('#Import').val("");
                        },
                        error: function (err) {
                            console.log(err.responseText);
                            Loader();
                        }
                    });
                };

                reader.readAsArrayBuffer(file);
            });

            function createExcelFile(jsonData) {
                const worksheet = XLSX.utils.json_to_sheet(jsonData);
                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
                const excelBuffer = XLSX.write(workbook, {
                    bookType: "xlsx",
                    type: "array"
                });
                const blob = new Blob([excelBuffer], { type: "application/octet-stream" });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'error_log.xlsx';
                link.click();
                URL.revokeObjectURL(link.href);
            }
        }
        // View excl sheet
        {
            $('.closeModalInstallments').click(function () {
                $('#excelModal').modal('hide');
                $('#CopyFromModal').modal('hide');
            });

            document.getElementById('ViewExcel').addEventListener('click', function () {
                let fileInput = document.getElementById('Import');
                let file = fileInput.files[0];
                let fileName = file.name;
                let baseName = fileName.split('.').slice(0, -1).join('.');
                let reader = new FileReader();

                reader.onload = function (e) {
                    let data = new Uint8Array(e.target.result);
                    let workbook = XLSX.read(data, { type: 'array' });
                    let firstSheetName = workbook.SheetNames[0];
                    let worksheet = workbook.Sheets[firstSheetName];

                    let excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                    let Eheaders = excelData[0];
                    let headers = Eheaders.map(header => header.split(',')[0]);

                    let rows = excelData.slice(1);
                    let dataArray = rows.map(row => {
                        let obj = {};
                        row.forEach((cell, i) => {
                            obj[headers[i]] = cell;
                        });
                        return obj;
                    });

                    let table = document.getElementById('excelTable');
                    table.innerHTML = '';

                    let thead = document.createElement('thead');
                    let tr = document.createElement('tr');
                    headers.forEach(header => {
                        let th = document.createElement('th');
                        th.textContent = header;
                        tr.appendChild(th);
                    });
                    thead.appendChild(tr);
                    table.appendChild(thead);

                    let tbody = document.createElement('tbody');
                    dataArray.forEach(row => {
                        let tr = document.createElement('tr');
                        headers.forEach(header => {
                            let td = document.createElement('td');
                            td.textContent = row[header];
                            tr.appendChild(td);
                        });
                        tbody.appendChild(tr);
                    });
                    table.appendChild(tbody);

                    $('#excelTable').DataTable({
                        ordering: true,
                        paging: true,
                        retrieve: true,
                        searching: false,
                        responsive: true,
                        colReorder: false,
                        orderCellsTop: false,
                        scrollY: '300px', // Set the height for the scroll
                        scrollX: true, // Enable horizontal scrolling if needed
                        scrollCollapse: true, // Enable collapse of the scroll area
                        paging: true, // Enable pagination
                        fixedHeader: true // Keep the header fixed
                    });
                    $('#excelModal').modal('show');
                };

                reader.readAsArrayBuffer(file);
            });



        }
      });
</script>

